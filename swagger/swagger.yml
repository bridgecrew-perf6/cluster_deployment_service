swagger: "2.0"
info:
  title: antelope API
  description: cloudPlex CNAP node pool solution
  version: 1.0.0
  termsOfService: https://cloudplex.io/
  contact:
    email: info@cloudplex.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /antelope
paths:
  /cluster/aks/:
    put:
      tags:
      - cluster/aks
      description: update an existing cluster
      operationId: AKSClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSCluster'
      responses:
        "200":
          description: '{"msg": "Cluster updated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "402":
          description: '{"error": "Cluster is in running/deploying/terminating state"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
    post:
      tags:
      - cluster/aks
      description: add a new cluster
      operationId: AKSClusterController.Create
      parameters:
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSCluster'
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "400":
          description: '{"msg": "Runtime Error"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster against this project already exists"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/aks/{projectId}/:
    get:
      tags:
      - cluster/aks
      description: Get cluster against the projectId
      operationId: AKSClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aks.AKSCluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/aks/{projectId}/{forceDelete}:
    delete:
      tags:
      - cluster/aks
      description: Delete a cluster
      operationId: AKSClusterController.Delete
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Project id of the cluster
        required: true
        type: string
      - in: path
        name: forceDelete
        description: "true"
        type: boolean
      responses:
        "204":
          description: '{"msg": "Cluster deleted successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in running/deploying/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/aks/all:
    get:
      tags:
      - cluster/aks
      description: get all the clusters
      operationId: AKSClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.AKSCluster'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/aks/getallkubeversions/{region}:
    get:
      tags:
      - cluster/aks
      description: fetch version of kubernetes cluster
      operationId: AKSClusterController.Get Kube Versions
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: path
        name: region
        description: Cloud region
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Internal Server Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/aks/getvms/{region}:
    get:
      tags:
      - cluster/aks
      description: get aks vm types
      operationId: AKSClusterController.GetAKSVmsTypes
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: region
        description: Cloud region
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.VMSizeTypes'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/aks/kubeconfig/{projectId}:
    get:
      tags:
      - cluster/aks
      description: get cluter kubeconfig
      operationId: AKSClusterController.Kubeconfig
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Internal Server Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/aks/start/{projectId}:
    post:
      tags:
      - cluster/aks
      description: Deploy a kubernetes cluster
      operationId: AKSClusterController.Start
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "202":
          description: '{"msg": "Cluster creation initiated"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in Created/Creating/Terminating/TerminationFailed
            state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/aks/status/{projectId}/:
    get:
      tags:
      - cluster/aks
      description: Get live status of the running cluster
      operationId: AKSClusterController.Status
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aks.AKSCluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in deploying/terminating state"}'
        "500":
          description: '{"error": "Internal Server Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/aks/terminate/{projectId}/:
    post:
      tags:
      - cluster/aks
      description: Terminate a running cluster
      operationId: AKSClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "202":
          description: '{"msg": "Cluster termination started successfully"}'
        "204":
          description: '{"msg": "Cluster terminated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in New/Creating/Cluster Creation Failed
            /Terminated/Terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/aws/:
    put:
      tags:
      - cluster/aws
      description: update an existing cluster
      operationId: AWSClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aws.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "405":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/aws
      description: create a new cluster
      operationId: AWSClusterController.Create
      parameters:
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aws.Cluster_Def'
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"msg": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "cluster against this project already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/{projectId}/:
    get:
      tags:
      - cluster/aws
      description: get cluster
      operationId: AWSClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/aws/all:
    get:
      tags:
      - cluster/aws
      description: get all the clusters
      operationId: AWSClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/amis/{amiId}/{region}:
    get:
      tags:
      - cluster/aws
      description: returns aws ami details
      operationId: AWSClusterController.AwsAmis
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: region
        description: cloud region
        required: true
        type: string
      - in: path
        name: amiId
        description: Id of the ami
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/*ec2.BlockDeviceMapping'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "ami id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/applyagent/{projectId}:
    post:
      tags:
      - cluster/aws
      description: Apply cloudplex Agent file to eks cluster
      operationId: AWSClusterController.Start
      parameters:
      - in: header
        name: clusterName
        description: clusterName
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Agent Applied successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/enablescaling/{projectId}/:
    post:
      tags:
      - cluster/aws
      description: enables autoscaling
      operationId: AWSClusterController.EnableScaling
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster autoscaled successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/getallmachines:
    get:
      tags:
      - cluster/aws
      description: Get AWS  Machine Types
      operationId: AWSClusterController.Get Machine Types
      responses:
        "200":
          description: '[]string'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/getallregions:
    get:
      tags:
      - cluster/aws
      description: Get AWS Regions
      operationId: AWSClusterController.GetRegions
      responses:
        "200":
          description: '[]models.Region'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/getzones/{region}:
    get:
      tags:
      - cluster/aws
      description: return zones against a region
      operationId: AWSClusterController.Get Availability Zone
      parameters:
      - in: header
        name: X-Auth-Token
        description: "true"
        type: string
      - in: path
        name: region
        description: region of AWS
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "true"
        type: string
      responses:
        "200":
          description: '[]*string'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/machine/info:
    get:
      tags:
      - cluster/aws
      description: Get AWS Machine instance cores
      operationId: AWSClusterController.GetCores
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Machine'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkey/{keyname}/{region}:
    delete:
      tags:
      - cluster/aws
      description: Delete SSH key
      operationId: AWSClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: region
        description: cloud region
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "key deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "User is unauthorized to perform this action"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkey/{projectId}/{keyname}/{region}:
    post:
      tags:
      - cluster/aws
      description: Generates new SSH key
      operationId: AWSClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: path
        name: region
        description: cloud region
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AWSKey'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkeys/{region}:
    get:
      tags:
      - cluster/aws
      description: returns ssh key pairs
      operationId: AWSClusterController.SSHKeyPair
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: region
        description: region
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/start/{projectId}:
    post:
      tags:
      - cluster/aws
      description: starts a  cluster
      operationId: AWSClusterController.Start
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/status/{projectId}/:
    get:
      tags:
      - cluster/aws
      description: returns status of nodes
      operationId: AWSClusterController.Status
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/terminate/{projectId}/:
    post:
      tags:
      - cluster/aws
      description: terminates a  cluster
      operationId: AWSClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        schema:
          $ref: '#/definitions/X-Profile-Id'
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/validateProfile/:
    post:
      tags:
      - cluster/aws
      description: check if profile is valid
      operationId: AWSClusterController.Validate Profile
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/vault.AwsCredentials'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "profile is invalid"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/awsdelete/{projectId}/{forceDelete}:
    delete:
      tags:
      - cluster/aws
      description: delete a cluster
      operationId: AWSClusterController.Delete
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: projectId
        description: project id of the cluster
        required: true
        type: string
      - in: path
        name: forceDelete
        description: "true"
        type: boolean
      responses:
        "200":
          description: '{"msg": "cluster deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/:
    put:
      tags:
      - cluster/azure
      description: update an existing cluster
      operationId: AzureClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/azure.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no cluster exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/azure
      description: create a new cluster
      operationId: AzureClusterController.Create
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/azure.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"msg": "error message"}'
        "401":
          description: '{"msg": "error message"}'
        "404":
          description: '{"msg": "error message"}'
        "409":
          description: '{"error": "cluster against same project id already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/{projectId}/:
    get:
      tags:
      - cluster/azure
      description: get cluster
      operationId: AzureClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/azure/{projectId}/{forceDelete}: {}
  /cluster/azure/all:
    get:
      tags:
      - cluster/azure
      description: get all the clusters
      operationId: AzureClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/applyagent/{projectId}:
    post:
      tags:
      - cluster/azure
      description: Apply cloudplex Agent file to a aks cluster
      operationId: AzureClusterController.Start
      parameters:
      - in: header
        name: clusterName
        description: clusterName
        type: string
      - in: header
        name: resourceGroup
        description: resourceGroup
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Agent Applied successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/getAllInstances/{region}:
    get:
      tags:
      - cluster/azure
      description: Getting All Instances
      operationId: AzureClusterController.Get Instances
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      - in: path
        name: region
        description: Cloud region
        type: string
      responses:
        "200":
          description: '[]compute.VirtualMachines'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/getallmachines:
    get:
      tags:
      - cluster/azure
      description: Get Azure VM Sizes
      operationId: AzureClusterController.Get VM Sizes
      responses:
        "200":
          description: '[]string'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/getallregions:
    get:
      tags:
      - cluster/azure
      description: Get Azure Regions
      operationId: AzureClusterController.Get Azure Regions
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "true"
        type: string
      responses:
        "200":
          description: '[]model.Region'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/machine/info:
    get:
      tags:
      - cluster/azure
      description: Get Azure Machine instance cores
      operationId: AzureClusterController.GetCores
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Machine'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkey/{keyname}:
    delete:
      tags:
      - cluster/azure
      description: Delete SSH key
      operationId: AzureClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": key deleted successfully}'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkey/{keyname}/{projectId}:
    post:
      tags:
      - cluster/azure
      description: Generates new SSH key
      operationId: AzureClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: -Auth-Token
        description: token
        required: true
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "404":
          description: '{"error": "error message"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkeys:
    get:
      tags:
      - cluster/azure
      description: returns ssh key pairs
      operationId: AzureClusterController.SSHKeyPair
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/start/{projectId}:
    post:
      tags:
      - cluster/azure
      description: starts a  cluster
      operationId: AzureClusterController.Start
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/status/{projectId}/:
    get:
      tags:
      - cluster/azure
      description: returns status of nodes
      operationId: AzureClusterController.Status
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/terminate/{projectId}/:
    post:
      tags:
      - cluster/azure
      description: terminates a  cluster
      operationId: AzureClusterController.Terminate
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/validateProfile/:
    post:
      tags:
      - cluster/azure
      description: check if profile is valid
      operationId: AzureClusterController.Validate Profile
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/vault.AzureCredentials'
      responses:
        "200":
          description: '{"msg": "Profile is valid"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "profile is invalid"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/:
    put:
      tags:
      - cluster/do
      description: update an existing cluster
      operationId: DOClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/do.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "405":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/do
      description: create a new cluster
      operationId: DOClusterController.Create
      parameters:
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/do.Cluster_Def'
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: body not found
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: token not found
        "409":
          description: '{"error": "cluster against this project already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/{projectId}/:
    get:
      tags:
      - cluster/do
      description: get cluster
      operationId: DOClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/{projectId}/{forceDelete}: {}
  /cluster/do/all:
    get:
      tags:
      - cluster/do
      description: get all the clusters
      operationId: DOClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/getallregions/:
    get:
      tags:
      - cluster/do
      description: return regions and their supported machine sizes
      operationId: DOClusterController.GetRegions
      parameters:
      - in: header
        name: X-Profile-Id
        description: DO profile
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/godo.Region'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/sshkey/{keyname}/{region}:
    delete:
      tags:
      - cluster/do
      description: Delete SSH key
      operationId: DOClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: region
        description: region
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "key deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "User is unauthorized to perform this action"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/sshkey/{projectId}/{keyname}/{region}:
    post:
      tags:
      - cluster/do
      description: Generates new SSH key
      operationId: DOClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: path
        name: region
        description: region
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/sshkeys:
    get:
      tags:
      - cluster/do
      description: returns ssh key pairs
      operationId: DOClusterController.SSHKeyPair
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/start/{projectId}:
    post:
      tags:
      - cluster/do
      description: starts a  cluster
      operationId: DOClusterController.Start
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/status/{projectId}/:
    get:
      tags:
      - cluster/do
      description: returns status of nodes
      operationId: DOClusterController.Status
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/terminate/{projectId}/:
    post:
      tags:
      - cluster/do
      description: terminates a  cluster
      operationId: DOClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        schema:
          $ref: '#/definitions/X-Profile-Id'
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/validateProfile/:
    post:
      tags:
      - cluster/do
      description: validate if profile is valid
      operationId: DOClusterController.ValidateProfile
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: vault.DOCredentials
        name: body
        description: body for cluster content
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: '{"msg": "Profile is valid"}'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/doks/:
    put:
      tags:
      - cluster/doks
      description: Update an existing kubernetes cluster
      operationId: DOKSClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesCluster'
      responses:
        "200":
          description: '{"msg": "Cluster updated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in deploying/running/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
    post:
      tags:
      - cluster/doks
      description: Add a new cluster
      operationId: DOKSClusterController.Create
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesCluster'
      responses:
        "201":
          description: '{"msg": "Cluster added successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "409":
          description: '{"error": "Cluster against same project already exists"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/doks/{projectId}/:
    get:
      tags:
      - cluster/doks
      description: Get cluster against the projectId
      operationId: DOKSClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.KubernetesCluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/doks/{projectId}/{forceDelete}:
    delete:
      tags:
      - cluster/doks
      description: Delete a cluster
      operationId: DOKSClusterController.Delete
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Project id of the cluster
        required: true
        type: string
      - in: path
        name: forceDelete
        description: "true"
        type: boolean
      responses:
        "204":
          description: '{"msg": "Cluster deleted successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in deploying/running/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/doks/all:
    get:
      tags:
      - cluster/doks
      description: get all the clusters
      operationId: DOKSClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/doks.KubernetesCluster'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/doks/applyagent/{projectId}:
    post:
      tags:
      - cluster/doks
      description: Apply cloudplex Agent file to doks cluster
      operationId: DOKSClusterController.Start agent
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Agent Applied successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/doks/config:
    get:
      tags:
      - cluster/doks
      description: Get kubernetes version,machine types and regions
      operationId: DOKSClusterController.Get Options
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.ServerConfig'
        "404":
          description: '{"error": "Not found"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/doks/kubeconfig/{projectId}:
    get:
      tags:
      - cluster/doks
      description: Get valid kubernetes cluster version and machine sizes
      operationId: DOKSClusterController.Get Config File
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.KubernetesConfig'
        "404":
          description: '{"error": "Not found"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/doks/start/{projectId}:
    post:
      tags:
      - cluster/doks
      description: Deploy a kubernetes cluster
      operationId: DOKSClusterController.Start
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "202":
          description: '{"msg": "Cluster creation initiated"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in Created/Creating/Terminating/TerminationFailed
            state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/doks/status/{projectId}/:
    get:
      tags:
      - cluster/doks
      description: Get live status of the running cluster
      operationId: DOKSClusterController.Status
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.KubernetesCluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "409":
          description: '{"error": "Cluster is in deploying/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} doks.KubernetesCluster'
  /cluster/doks/terminate/{projectId}/:
    post:
      tags:
      - cluster/doks
      description: Terminate a running cluster
      operationId: DOKSClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "202":
          description: '{"msg": "Cluster termination initiated"}'
        "204":
          description: '{"msg": "Cluster terminated successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in New/Creating/Cluster Creation Failed
            /Terminated/Terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/gcp/:
    put:
      tags:
      - cluster/gcp
      description: update an existing cluster
      operationId: GcpClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gcp.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no cluster exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/gcp
      description: create a new cluster
      operationId: GcpClusterController.Create
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gcp.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "cluster against same project id already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/{projectId}/:
    get:
      tags:
      - cluster/gcp
      description: get cluster
      operationId: GcpClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/{projectId}/{forceDelete}: {}
  /cluster/gcp/all:
    get:
      tags:
      - cluster/gcp
      description: get all the clusters
      operationId: GcpClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/getallmachines/{region}/{zone}:
    get:
      tags:
      - cluster/gcp
      description: return machines against a region and zone
      operationId: GcpClusterController.GetAllMachines
      parameters:
      - in: header
        name: X-Profile-Id
        description: "true"
        type: string
      - in: header
        name: X-Auth-Token
        description: "true"
        type: string
      - in: path
        name: region
        description: region of GCP
        required: true
        type: string
      - in: path
        name: zone
        description: zone of GCP
        required: true
        type: string
      responses:
        "200":
          description: '[]string'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/gcp/getallregions:
    get:
      tags:
      - cluster/gcp
      description: return all regions
      operationId: GcpClusterController.Get All Regions
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/gcp/getzones/{region}:
    get:
      tags:
      - cluster/gcp
      description: return zones against a region
      operationId: GcpClusterController.GetZonesAgainstRegion
      parameters:
      - in: header
        name: X-Profile-Id
        description: "true"
        type: string
      - in: header
        name: X-Auth-Token
        description: "true"
        type: string
      - in: path
        name: region
        description: region of GCP
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/gcp/serviceaccounts:
    get:
      tags:
      - cluster/gcp
      description: returns list of service account emails
      operationId: GcpClusterController.ListServiceAccounts
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "profile id is empty"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "500":
          description: '{"error":  "error msg"}'
  /cluster/gcp/sshkey/{keyname}:
    delete:
      tags:
      - cluster/gcp
      description: Delete SSH key
      operationId: GcpClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": key deleted successfully}'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": error msg}'
  /cluster/gcp/sshkey/{keyname}/{username}/{projectId}:
    post:
      tags:
      - cluster/gcp
      description: Generates new SSH key
      operationId: GcpClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: path
        name: username
        description: UserName
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/sshkeys:
    get:
      tags:
      - cluster/gcp
      description: returns ssh key pairs
      operationId: GcpClusterController.SSHKeyPair
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/start/{projectId}:
    post:
      tags:
      - cluster/gcp
      description: starts a  cluster
      operationId: GcpClusterController.Start
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/status/{projectId}/:
    get:
      tags:
      - cluster/gcp
      description: returns status of nodes
      operationId: GcpClusterController.Status
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Cluster_Def'
        "206":
          description: '{object} gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/terminate/{projectId}/:
    post:
      tags:
      - cluster/gcp
      description: terminates a  cluster
      operationId: GcpClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "400":
          description: '{"error": "error_msg"}'
        "401":
          description: '{"error": "Authorization format should be ''base64 encoded
            service_account_json''"}'
        "404":
          description: '{"error": "error_msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/validateProfile:
    post:
      tags:
      - cluster/gcp
      description: check if profile is valid
      operationId: GcpClusterController.Validate Profile
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gcp.GcpCredentials'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "profile is invalid"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gke/:
    put:
      tags:
      - cluster/gke
      description: Update an existing cluster
      operationId: GKEClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gke.GKECluster'
      responses:
        "200":
          description: '{"msg": "Cluster updated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "409":
          description: '{"error": "Cluster is in deploying/running/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
    post:
      tags:
      - cluster/gke
      description: add a new cluster
      operationId: GKEClusterController.Create
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gke.GKECluster'
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster against same project already exists"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/gke/{projectId}/:
    get:
      tags:
      - cluster/gke
      description: Get cluster against the projectId
      operationId: GKEClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gke.GKECluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/gke/{projectId}/{forceDelete}: {}
  /cluster/gke/all:
    get:
      tags:
      - cluster/gke
      description: get all the clusters
      operationId: GKEClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gke.GKECluster'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/gke/applyagent/{projectId}:
    post:
      tags:
      - cluster/gke
      description: Apply cloudplex Agent file to a gke cluster
      operationId: GKEClusterController.Start
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Agent Applied successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/gke/config/{region}:
    get:
      tags:
      - cluster/gke
      description: Get cluster versions and image sizes
      operationId: GKEClusterController.Get Options
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: region
        description: Region of the cloud
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gke.ServerConfig'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Bad Request"}'
        "500":
          description: '{"error": "Runtime error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/gke/start/{projectId}:
    post:
      tags:
      - cluster/gke
      description: Deploy a kubernetes cluster
      operationId: GKEClusterController.Start
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created initiated"}'
        "202":
          description: '{"msg": "Cluster creation started successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "409":
          description: '{"error": "Cluster is in Created/Creating/Terminating/TerminationFailed
            state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/gke/status/{projectId}/:
    get:
      tags:
      - cluster/gke
      description: Get live status of the running cluster
      operationId: GKEClusterController.Status
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gke.GKECluster'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "409":
          description: '{"error": "Cluster is in deploying/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/gke/terminate/{projectId}/:
    post:
      tags:
      - cluster/gke
      description: Terminate a running cluster
      operationId: GKEClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "202":
          description: '{"msg": "Cluster termination initiated"}'
        "204":
          description: '{"msg": "Cluster terminated successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "409":
          description: '{"error": "Cluster is in New/Creating/Cluster Creation Failed
            /Terminated/Terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/:
    put:
      tags:
      - cluster/iks
      description: Update an existing cluster
      operationId: IKSClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/iks.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "Cluster updated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "402":
          description: '{"error": "Cluster is in deploying/running/terminating state"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in running/deploying/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
    post:
      tags:
      - cluster/iks
      description: Add a new cluster
      operationId: IKSClusterController.Create
      parameters:
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/iks.Cluster_Def'
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster added successfully"}'
        "400":
          description: '{"msg": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster against this project already exists"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/{projectId}/:
    get:
      tags:
      - cluster/iks
      description: Get cluster against the projectId
      operationId: IKSClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/iks.Cluster_Def'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/{projectId}/{forceDelete}:
    delete:
      tags:
      - cluster/iks
      description: delete a cluster
      operationId: IKSClusterController.Delete
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Project id of the cluster
        required: true
        type: string
      - in: path
        name: forceDelete
        description: "true"
        type: boolean
      responses:
        "204":
          description: '{"msg": "Cluster deleted successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in deploying/running/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/all:
    get:
      tags:
      - cluster/iks
      description: get all the clusters
      operationId: IKSClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Cluster_Def'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Erorr"}'
  /cluster/iks/applyagent/{projectId}:
    post:
      tags:
      - cluster/iks
      description: Apply cloudplex agent file to eks cluster
      operationId: IKSClusterController.Apply agent
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: resourceGroup
        description: Resource Group
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Agent Applied successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/getallkubeversions/{region}:
    get:
      tags:
      - cluster/iks
      description: fetch version of kubernetes cluster
      operationId: IKSClusterController.Get Kubernetes Versions
      parameters:
      - in: path
        name: region
        description: region of the cloud
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Versions'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Unauthorized"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/getallmachines/{region}/:
    get:
      tags:
      - cluster/iks
      description: Get all available instance list
      operationId: IKSClusterController.Get Instance List
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        schema:
          $ref: '#/definitions/X-Profile-Id'
        default: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: region
        description: Region of the cloud
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/iks.AllInstancesResponse'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/getallregions/:
    get:
      tags:
      - cluster/iks
      description: fetch regions of IKS
      operationId: IKSClusterController.Get Regions
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Regions'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/getzones/{region}/:
    get:
      tags:
      - cluster/iks
      description: get zone against region
      operationId: IKSClusterController.Get Zone
      parameters:
      - in: path
        name: region
        description: Region of the cloud
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Zone'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/iks/start/{projectId}:
    post:
      tags:
      - cluster/iks
      description: Deploy a kubernetes cluster
      operationId: IKSClusterController.Start
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "202":
          description: '{"msg": "Cluster creation initiated"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in Created/Creating/Terminating/TerminationFailed
            state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/status/{projectId}/:
    get:
      tags:
      - cluster/iks
      description: Get live status of the running cluster
      operationId: IKSClusterController.Status
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile Id
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.KubeWorkerPoolStatus'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in deploying/terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/terminate/{projectId}/:
    post:
      tags:
      - cluster/iks
      description: Terminate a running cluster
      operationId: IKSClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: Vault credentials profile Id
        required: true
        schema:
          $ref: '#/definitions/X-Profile-Id'
        default: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "202":
          description: '{"msg": "Cluster termination initiated"}'
        "204":
          description: '{"msg": "Cluster terminated successfully"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in New/Creating/Cluster Creation Failed
            /Terminated/Terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/iks/validateProfile:
    post:
      tags:
      - cluster/iks
      description: Validate IBM profile
      operationId: IKSClusterController.Validate Profile
      parameters:
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/vault.IBMCredentials'
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Valid Profile"}'
        "400":
          description: '{"error": "Bad Request"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
        "512":
          description: '{object} types.CustomCPError'
  /cluster/op/:
    put:
      tags:
      - cluster/op
      description: update an existing cluster
      operationId: OPClusterController.Update
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        required: true
        type: string
      - in: header
        name: teams
        description: '''teams'
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/op.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "Cluster updated successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
    post:
      tags:
      - cluster/op
      description: add a new cluster
      operationId: OPClusterController.Create
      parameters:
      - in: body
        name: body
        description: Body for cluster content
        required: true
        schema:
          $ref: '#/definitions/op.Cluster_Def'
      - in: header
        name: teams
        description: teams
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "201":
          description: '{"msg": "Cluster created successfully"}'
        "400":
          description: '{"msg": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster against this project already exists"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/op/{projectId}/:
    get:
      tags:
      - cluster/op
      description: Get cluster against the projectId
      operationId: OPClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/op.Cluster_Def'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/op/{projectId}/{forceDelete}:
    delete:
      tags:
      - cluster/op
      description: delete a cluster
      operationId: OPClusterController.Delete
      parameters:
      - in: header
        name: X-Auth-Token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Project id of the cluster
        required: true
        type: string
      - in: path
        name: forceDelete
        description: "true"
        type: boolean
      responses:
        "204":
          description: '{"msg": "Cluster deleted successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "409":
          description: '{"error": "Cluster is in Creating/Created/Terminating state"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/op/all:
    get:
      tags:
      - cluster/op
      description: get all the company's clusters
      operationId: OPClusterController.Get All
      parameters:
      - in: header
        name: X-Auth-Token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/op.Cluster_Def'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /cluster/op/checkCluster/{projectId}/:
    get:
      tags:
      - cluster/op
      description: validates a cluster
      operationId: OPClusterController.ValidateCluster
      parameters:
      - in: header
        name: token
        description: Token
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "Cluster is created successfully"}'
        "400":
          description: '{"error": "Bad Request"}'
        "401":
          description: '{"error": "Unauthorized"}'
        "404":
          description: '{"error": "Not Found"}'
        "500":
          description: '{"error": "Runtime Error"}'
  /customerTemplate/register:
    post:
      tags:
      - customerTemplate
      description: register customer templates
      operationId: CustomerTempalteController.Post
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /health/:
    get:
      tags:
      - health
      description: get health
      operationId: HealthController.Get
      responses:
        "200":
          description: '"alive!"'
  /template/aks/:
    put:
      tags:
      - template/aks
      description: update an existing template
      operationId: AKSTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSClusterTemplate'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aks
      description: create a new template
      operationId: AKSTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSClusterTemplate'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/{templateId}:
    get:
      tags:
      - template/aks
      description: get template
      operationId: AKSTemplateController.Get
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Id of the template
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aks.AKSClusterTemplate'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/aks
      description: delete a templates
      operationId: AKSTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Name of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/all:
    get:
      tags:
      - template/aks
      description: get all the templates
      operationId: AKSTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.AKSClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/allCustomerTemplates:
    get:
      tags:
      - template/aks
      description: get all the customer templates
      operationId: AKSTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.AKSClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/allCustomerTemplatesInfo:
    get:
      tags:
      - template/aks
      description: get all the customer templates info
      operationId: AKSTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.AKSClusterTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/allTemplatesInfo:
    get:
      tags:
      - template/aks
      description: get all the templates info
      operationId: AKSTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aks.AKSClusterTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/customerTemplate:
    put:
      tags:
      - template/aks
      description: update an existing customer template
      operationId: AKSTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSClusterTemplate'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aks
      description: create a new customer template
      operationId: AKSTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aks.AKSClusterTemplate'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aks/customerTemplate/{templateId}:
    get:
      tags:
      - template/aks
      description: get customer template
      operationId: AKSTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aks.AKSClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/aks
      description: delete a customer template
      operationId: AKSTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/:
    put:
      tags:
      - template/aws
      description: update an existing template
      operationId: AWSTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aws
      description: create a new template
      operationId: AWSTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/{templateId}:
    delete:
      tags:
      - template/aws
      description: delete a templates
      operationId: AWSTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/{templateId}/:
    get:
      tags:
      - template/aws
      description: get template
      operationId: AWSTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/all:
    get:
      tags:
      - template/aws
      description: get all the templates
      operationId: AWSTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allCustomerTemplates:
    get:
      tags:
      - template/aws
      description: get all the customer templates
      operationId: AWSTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allCustomerTemplatesInfo:
    get:
      tags:
      - template/aws
      description: get all the customer templates info
      operationId: AWSTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allTemplatesInfo:
    get:
      tags:
      - template/aws
      description: get all the templates info
      operationId: AWSTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/customerTemplate:
    put:
      tags:
      - template/aws
      description: update an existing customer template
      operationId: AWSTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aws
      description: create a new customer template
      operationId: AWSTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error message"}'
        "401":
          description: '{"error": "error message"}'
        "404":
          description: '{"error": "error message"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/customerTemplate/{templateId}:
    get:
      tags:
      - template/aws
      description: get customer template
      operationId: AWSTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/aws
      description: delete a customer template
      operationId: AWSTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/:
    put:
      tags:
      - template/azure
      description: update an existing template
      operationId: AzureTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/azure
      description: create a new template
      operationId: AzureTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/{templateId}:
    get:
      tags:
      - template/azure
      description: get template
      operationId: AzureTemplateController.Get
      parameters:
      - in: path
        name: name
        description: Name of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/azure
      description: delete a templates
      operationId: AzureTemplateController.Delete
      parameters:
      - in: path
        name: name
        description: Name of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/all:
    get:
      tags:
      - template/azure
      description: get all the templates
      operationId: AzureTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allCustomerTemplates:
    get:
      tags:
      - template/azure
      description: get all the customer templates
      operationId: AzureTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allCustomerTemplatesInfo:
    get:
      tags:
      - template/azure
      description: get all customer templates info
      operationId: AzureTemplateController.Get All Customer Templates Info
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allTemplatesInfo:
    get:
      tags:
      - template/azure
      description: get all templates info
      operationId: AzureTemplateController.Get All Templates Info
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/customerTemplate:
    put:
      tags:
      - template/azure
      description: update an existing customer template
      operationId: AzureTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/azure
      description: create a new customer template
      operationId: AzureTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/customerTemplate/{templateId}:
    get:
      tags:
      - template/azure
      description: get customer template
      operationId: AzureTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/azure
      description: delete a customer template
      operationId: AzureTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/:
    put:
      tags:
      - template/do
      description: update an existing template
      operationId: DOTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/do
      description: create a new template
      operationId: DOTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/{templateId}:
    delete:
      tags:
      - template/do
      description: delete a template
      operationId: DOTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/{templateId}/:
    get:
      tags:
      - template/do
      description: get template
      operationId: DOTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/all:
    get:
      tags:
      - template/do
      description: get all the templates
      operationId: DOTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allCustomerTemplates:
    get:
      tags:
      - template/do
      description: get all the customer templates
      operationId: DOTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allCustomerTemplatesInfo:
    get:
      tags:
      - template/do
      description: get all the customer templates info
      operationId: DOTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allTemplatesInfo:
    get:
      tags:
      - template/do
      description: get all the templates info
      operationId: DOTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/customerTemplate:
    put:
      tags:
      - template/do
      description: update an existing customer template
      operationId: DOTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/do
      description: create a new customer template
      operationId: DOTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error message"}'
        "401":
          description: '{"error": "error message"}'
        "404":
          description: '{"error": "error message"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/customerTemplate/{templateId}:
    get:
      tags:
      - template/do
      description: get customer template
      operationId: DOTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/do
      description: delete a customer template
      operationId: DOTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/:
    put:
      tags:
      - template/doks
      description: update an existing kubernetes template
      operationId: DOKSTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesTemplate'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/doks
      description: create a new kubernetes cluster template
      operationId: DOKSTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesTemplate'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/{templateId}:
    delete:
      tags:
      - template/doks
      description: delete kubernetes template
      operationId: DOKSTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/{templateId}/:
    get:
      tags:
      - template/doks
      description: get kubernetes cluster template
      operationId: DOKSTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.KubernetesTemplate'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/all:
    get:
      tags:
      - template/doks
      description: get all kubernetes cluster templates
      operationId: DOKSTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/doks.KubernetesTemplate'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/allCustomerTemplates:
    get:
      tags:
      - template/doks
      description: get all the customer templates
      operationId: DOKSTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/doks.KubernetesTemplate'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/allCustomerTemplatesInfo:
    get:
      tags:
      - template/doks
      description: get all the customer templates info
      operationId: DOKSTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/doks.KubernetesTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/allTemplatesInfo:
    get:
      tags:
      - template/doks
      description: get all kubernetes templates info
      operationId: DOKSTemplateController.GetAllKubernetesTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/doks.KubernetesTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/customerTemplate:
    put:
      tags:
      - template/doks
      description: update an existing kubernetes customer template
      operationId: DOKSTemplateController.Update customer kubernetes template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesTemplate'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/doks
      description: create a new customer template
      operationId: DOKSTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/doks.KubernetesTemplate'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error message"}'
        "401":
          description: '{"error": "error message"}'
        "404":
          description: '{"error": "error message"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/doks/customerTemplate/{templateId}:
    get:
      tags:
      - template/doks
      description: get customer template
      operationId: DOKSTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/doks.KubernetesTemplate'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/doks
      description: delete a customer template
      operationId: DOKSTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/:
    put:
      tags:
      - template/gcp
      description: update an existing template
      operationId: GcpTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gcp
      description: create a new template
      operationId: GcpTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/{templateId}:
    get:
      tags:
      - template/gcp
      description: get template
      operationId: GcpTemplateController.Get
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Id of the template
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Template'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gcp
      description: delete a templates
      operationId: GcpTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Name of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/all:
    get:
      tags:
      - template/gcp
      description: get all the templates
      operationId: GcpTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allCustomerTemplates:
    get:
      tags:
      - template/gcp
      description: get all the customer templates
      operationId: GcpTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allCustomerTemplatesInfo:
    get:
      tags:
      - template/gcp
      description: get all the customer templates info
      operationId: GcpTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allTemplatesInfo:
    get:
      tags:
      - template/gcp
      description: get all the templates info
      operationId: GcpTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/customerTemplate:
    put:
      tags:
      - template/gcp
      description: update an existing customer template
      operationId: GcpTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gcp
      description: create a new customer template
      operationId: GcpTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/customerTemplate/{templateId}:
    get:
      tags:
      - template/gcp
      description: get customer template
      operationId: GcpTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gcp
      description: delete a customer template
      operationId: GcpTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/:
    put:
      tags:
      - template/gke
      description: update an existing template
      operationId: GKETemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gke.GKEClusterTemplate'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gke
      description: create a new template
      operationId: GKETemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gke.GKEClusterTemplate'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/{templateId}:
    get:
      tags:
      - template/gke
      description: get template
      operationId: GKETemplateController.Get
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Id of the template
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gke.GKEClusterTemplate'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gke
      description: delete a templates
      operationId: GKETemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Name of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/all:
    get:
      tags:
      - template/gke
      description: get all the templates
      operationId: GKETemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gke.GKEClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/allCustomerTemplates:
    get:
      tags:
      - template/gke
      description: get all the customer templates
      operationId: GKETemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gke.GKEClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/allCustomerTemplatesInfo:
    get:
      tags:
      - template/gke
      description: get all the customer templates info
      operationId: GKETemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gke.GKEClusterTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/allTemplatesInfo:
    get:
      tags:
      - template/gke
      description: get all the templates info
      operationId: GKETemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gke.GKEClusterTemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/customerTemplate:
    put:
      tags:
      - template/gke
      description: update an existing customer template
      operationId: GKETemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gke.GKEClusterTemplate'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gke
      description: create a new customer template
      operationId: GKETemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gke.GKEClusterTemplate'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gke/customerTemplate/{templateId}:
    get:
      tags:
      - template/gke
      description: get customer template
      operationId: GKETemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gke.GKEClusterTemplate'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gke
      description: delete a customer template
      operationId: GKETemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/:
    put:
      tags:
      - template/iks
      description: update an existing template
      operationId: IKSTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/iks.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/iks
      description: create a new template
      operationId: IKSTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/iks.Template'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/{templateId}:
    get:
      tags:
      - template/iks
      description: get template
      operationId: IKSTemplateController.Get
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Id of the template
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/iks.Template'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/iks
      description: delete a templates
      operationId: IKSTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Name of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/all:
    get:
      tags:
      - template/iks
      description: get all the templates
      operationId: IKSTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/allCustomerTemplates:
    get:
      tags:
      - template/iks
      description: get all the customer templates
      operationId: IKSTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/allCustomerTemplatesInfo:
    get:
      tags:
      - template/iks
      description: get all the customer templates info
      operationId: IKSTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/allTemplatesInfo:
    get:
      tags:
      - template/iks
      description: get all the templates info
      operationId: IKSTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/iks.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/customerTemplate:
    put:
      tags:
      - template/iks
      description: update an existing customer template
      operationId: IKSTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/iks.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/iks
      description: create a new customer template
      operationId: IKSTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/iks.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/iks/customerTemplate/{templateId}:
    get:
      tags:
      - template/iks
      description: get customer template
      operationId: IKSTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/iks.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/iks
      description: delete a customer template
      operationId: IKSTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/op/:
    put:
      tags:
      - template/op
      description: update an existing template
      operationId: OPTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/op.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/op
      description: create a new template
      operationId: OPTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/op.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/op/{templateId}:
    delete:
      tags:
      - template/op
      description: delete a template
      operationId: OPTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/op/{templateId}/:
    get:
      tags:
      - template/op
      description: get template
      operationId: OPTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/op.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/op/all:
    get:
      tags:
      - template/op
      description: get all the templates
      operationId: OPTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/op.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
definitions:
  '*ec2.BlockDeviceMapping':
    title: BlockDeviceMapping
    type: object
  482.0xc0015154d0.false:
    title: "false"
    type: object
  605.0xc000dfe390.false:
    title: "false"
    type: object
  644.0xc0010f10e0.false:
    title: "false"
    type: object
  667.0xc001439740.false:
    title: "false"
    type: object
  7814.string:
    title: string
    type: object
  13859.0xc001565260.false:
    title: "false"
    type: object
  51173.0xc0014e8a50.false:
    title: "false"
    type: object
  55805.string:
    title: string
    type: object
  X-Profile-Id:
    title: X-Profile-Id
    type: object
  aks.AKSCluster:
    title: AKSCluster
    type: object
    properties:
      api_server_access_profile:
        $ref: '#/definitions/aks.ManagedClusterAPIServerAccessProfile'
      client_id:
        description: Client ID for service principal ['required' if service principal
          enabled]
        type: string
      company_id:
        description: ID of compnay [optional]
        type: string
      dns_prefix:
        description: Cluster DNS prefix ['required' if advance settings enabled]
        type: string
      dns_service_ip:
        description: DNS service IP for cluster ['required' if expert settings enabled]
        type: string
      docker_bridge_cidr:
        description: Docker bridge CIDR for cluster ['required' if expert settings
          enabled]
        type: string
      enable_http_routing:
        description: Cluster Http Routing configuration ['required' if advance settings
          enabled]
        type: boolean
      enable_rbac:
        description: Cluster RBAC configuration ['required' if advance settings enabled]
        type: boolean
      enable_service_principal:
        description: Service principal configurations ['required' if advance settings
          enabled]
        type: boolean
      is_advance:
        description: Cluster advance level settings possible value 'true' or 'false'
        type: boolean
      is_expert:
        description: Cluster expert level settings possible value 'true' or 'false'
        type: boolean
      kubernetes_version:
        description: Kubernetes version to be provisioned ['required' if advance settings
          enabled]
        type: string
      location:
        description: Location for cluster provisioning [required]
        type: string
      name:
        description: Cluster name [required]
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/aks.ManagedClusterAgentPoolProfile'
      pod_cidr:
        description: Pod CIDR for cluster ['required' if expert settings enabled]
        type: string
      project_id:
        description: ID of project [required]
        type: string
      resource_group:
        description: Resources would be created within resource_group [required]
        type: string
      secret:
        description: Client secret for service principal ['required' if service principal
          enabled]
        type: string
      service_cidr:
        description: Service CIDR for cluster ['required' if expert settings enabled]
        type: string
      status:
        $ref: '#/definitions/models.Type'
        description: Status of cluster [required]
      tags:
        description: Cluster tags [optional]
        type: array
        items:
          $ref: '#/definitions/aks.Tag'
  aks.AKSClusterTemplate:
    title: AKSClusterTemplate
    type: object
    properties:
      Template_id:
        type: string
      cloud:
        $ref: '#/definitions/models.Cloud'
      cluster_id:
        type: string
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      location:
        type: string
      name:
        type: string
      properties:
        $ref: '#/definitions/aks.ManagedClusterPropertiesT'
      resource_group:
        type: string
      status:
        type: string
      tags:
        $ref: '#/definitions/55805.string'
      type:
        type: string
  aks.AKSClusterTemplateMetadata:
    title: AKSClusterTemplateMetadata
    type: object
  aks.ManagedClusterAPIServerAccessProfile:
    title: ManagedClusterAPIServerAccessProfile
    type: object
    properties:
      authorized_ip_ranges:
        description: Authorized IP ranges for accessing kube server [optional]
        type: array
        items:
          type: string
  aks.ManagedClusterAPIServerAccessProfileT:
    title: ManagedClusterAPIServerAccessProfileT
    type: object
    properties:
      authorized_ip_ranges:
        type: array
        items:
          type: string
      enable_private_cluster:
        type: boolean
  aks.ManagedClusterAgentPoolProfile:
    title: ManagedClusterAgentPoolProfile
    type: object
    properties:
      count:
        description: Pool node count [required]
        type: integer
        format: int32
      enable_auto_scaling:
        description: Autoscaling configuration, possible value 'true' or 'false' [required]
        type: boolean
      max_count:
        description: Max VM count, must be greater than min count ['required' if autoscaling
          is enabled]
        type: integer
        format: int32
      max_pods:
        description: Max pods per node [required]
        type: integer
        format: int32
      min_count:
        description: Min VM count ['required' if autoscaling is enabled]
        type: integer
        format: int32
      name:
        description: Cluster pool name [required]
        type: string
      node_labels:
        type: array
        items:
          $ref: '#/definitions/aks.Tag'
      os_disk_size_gb:
        description: Disk size for VMs [required]
        type: integer
        format: int32
      subnet_id:
        description: ID of subnet in which pool will be created [required]
        type: string
      vm_size:
        description: Machine type for pool [required]
        type: string
  aks.ManagedClusterAgentPoolProfileT:
    title: ManagedClusterAgentPoolProfileT
    type: object
    properties:
      count:
        type: integer
        format: int32
      enable_auto_scaling:
        type: boolean
      max_count:
        type: integer
        format: int32
      max_pods:
        type: integer
        format: int32
      min_count:
        type: integer
        format: int32
      name:
        type: string
      os_disk_size_gb:
        type: integer
        format: int32
      os_type:
        $ref: '#/definitions/aks.OSType'
      subnet_id:
        type: string
      vm_size:
        $ref: '#/definitions/aks.VMSizeTypes'
  aks.ManagedClusterPropertiesT:
    title: ManagedClusterPropertiesT
    type: object
    properties:
      agent_pool:
        type: array
        items:
          $ref: '#/definitions/aks.ManagedClusterAgentPoolProfileT'
      api_server_access_profile:
        $ref: '#/definitions/aks.ManagedClusterAPIServerAccessProfileT'
      enable_rbac:
        type: boolean
  aks.OSType:
    title: OSType
    type: object
  aks.Tag:
    title: Tag
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  aks.VMSizeTypes:
    title: VMSizeTypes
    type: object
  aws.Ami:
    title: Ami
    type: object
    properties:
      ami_id:
        type: string
      name:
        type: string
      root_volume:
        $ref: '#/definitions/aws.Volume'
      username:
        type: string
  aws.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  aws.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      kube_credentials:
        $ref: '#/definitions/605.0xc000dfe390.false'
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/aws.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
  aws.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: string
      key_name:
        type: string
      name:
        type: string
      node_state:
        type: string
      private_dns:
        type: string
      private_ip:
        type: string
      public_dns:
        type: string
      public_ip:
        type: string
      ssh_key:
        type: string
      user_name:
        type: string
  aws.NodePool:
    title: NodePool
    type: object
    properties:
      ami:
        $ref: '#/definitions/aws.Ami'
      auto_scaling:
        $ref: '#/definitions/aws.AutoScaling'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      external_volume:
        $ref: '#/definitions/aws.Volume'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AWSKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/aws.Node'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/aws.string'
      subnet_id:
        type: string
  aws.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      ami:
        $ref: '#/definitions/aws.Ami'
      enable_public_ip:
        type: boolean
      external_volume:
        $ref: '#/definitions/aws.Volume'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int32
      pool_role:
        type: string
      security_group_id:
        type: array
        items:
          type: string
      subnet_id:
        type: string
  aws.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/aws.NodePoolT'
      template_id:
        type: string
  aws.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  aws.Volume:
    title: Volume
    type: object
    properties:
      delete_on_termination:
        type: boolean
      iops:
        type: integer
        format: int64
      volume_size:
        type: integer
        format: int64
      volume_type:
        type: string
  aws.string:
    title: string
    type: object
  azure.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  azure.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/azure.NodePool'
      project_id:
        type: string
      resource_group:
        type: string
      status:
        type: string
      token_name:
        type: string
  azure.DiagnosticsProfile:
    title: DiagnosticsProfile
    type: object
    properties:
      enable:
        type: boolean
      new_storage_account:
        type: boolean
      storage_account_id:
        type: string
  azure.ImageReference:
    title: ImageReference
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      image_id:
        type: string
      offer:
        type: string
      publisher:
        type: string
      sku:
        type: string
      version:
        type: string
  azure.NodePool:
    title: NodePool
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      auto_scaling:
        $ref: '#/definitions/azure.AutoScaling'
      boot_diagnostics:
        $ref: '#/definitions/azure.DiagnosticsProfile'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/azure.ImageReference'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/azure.VM'
      os_disk_type:
        $ref: '#/definitions/models.OsDiskType'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/azure.string'
      subnet_id:
        type: string
      user_name:
        type: string
      volume:
        $ref: '#/definitions/azure.Volume'
  azure.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      boot_diagnostics:
        $ref: '#/definitions/azure.DiagnosticsProfile'
      enable_public_ip:
        type: boolean
      image:
        $ref: '#/definitions/azure.ImageReference'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/azure.VM'
      os_disk_type:
        $ref: '#/definitions/models.OsDiskType'
      pool_role:
        type: string
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/azure.string'
      subnet_id:
        type: string
      user_name:
        type: string
      volume:
        $ref: '#/definitions/azure.Volume'
  azure.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/azure.NodePoolT'
      resource_group:
        type: string
      template_id:
        type: string
  azure.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  azure.VM:
    title: VM
    type: object
    properties:
      cloud_id:
        type: string
      computer_name:
        type: string
      identity_principal_id:
        type: string
      name:
        type: string
      node_state:
        type: string
      password:
        type: string
      private_ip:
        type: string
      public_ip:
        type: string
      user_name:
        type: string
  azure.Volume:
    title: Volume
    type: object
    properties:
      disk_size:
        type: integer
        format: int32
      disk_type:
        $ref: '#/definitions/models.OsDiskType'
  azure.string:
    title: string
    type: object
  bson.ObjectId:
    title: ObjectId
    type: object
  do.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      do_project_id:
        type: string
      kube_credentials:
        $ref: '#/definitions/644.0xc0010f10e0.false'
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/do.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
  do.ImageReference:
    title: ImageReference
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      image_id:
        type: integer
        format: int64
      slug:
        type: string
  do.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: integer
        format: int64
      name:
        type: string
      node_state:
        type: string
      private_dns:
        type: string
      private_ip:
        type: string
      public_dns:
        type: string
      public_ip:
        type: string
      user_name:
        type: string
      volume_id:
        type: string
  do.NodePool:
    title: NodePool
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      external_volume:
        $ref: '#/definitions/do.Volume'
      image:
        $ref: '#/definitions/do.ImageReference'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/do.Node'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      private_networking:
        type: boolean
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/do.string'
  do.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      external_volume:
        $ref: '#/definitions/do.Volume'
      image:
        $ref: '#/definitions/do.ImageReference'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int32
      nodes:
        type: array
        items:
          $ref: '#/definitions/do.Node'
      pool_role:
        type: string
      private_networking:
        type: boolean
      security_group_id:
        type: array
        items:
          type: string
  do.Template:
    title: Template
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/do.NodePoolT'
      template_id:
        type: string
  do.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  do.Volume:
    title: Volume
    type: object
    properties:
      volume_size:
        type: integer
        format: int64
  do.string:
    title: string
    type: object
  doks.Cluster:
    title: Cluster
    type: object
    properties:
      certificate-authority-data:
        type: string
      server:
        type: string
  doks.Clusters:
    title: Clusters
    type: object
    properties:
      cluster:
        $ref: '#/definitions/doks.Cluster'
      name:
        type: string
  doks.Context:
    title: Context
    type: object
    properties:
      cluster:
        type: string
      user:
        type: string
  doks.Contexts:
    title: Contexts
    type: object
    properties:
      context:
        $ref: '#/definitions/doks.Context'
      name:
        type: string
  doks.KubernetesCluster:
    title: KubernetesCluster
    type: object
    properties:
      auto_upgrade:
        description: Auto upgradation of cluster on new kubernetes version [optional]
        type: boolean
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        description: ID of compnay [optional]
        type: string
      is_advance:
        type: boolean
      is_expert:
        type: boolean
      name:
        description: Cluster name [required]
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/doks.KubernetesNodePool'
      project_id:
        description: ID of project [required]
        type: string
      region:
        description: Location for cluster provisioning [required]
        type: string
      status:
        $ref: '#/definitions/models.Type'
        description: Status of cluster [required]
      tags:
        type: array
        items:
          type: string
      version:
        description: Kubernetes version to be provisioned [required]
        type: string
  doks.KubernetesConfig:
    title: KubernetesConfig
    type: object
    properties:
      apiVersion:
        type: string
      clusters:
        type: array
        items:
          $ref: '#/definitions/doks.Clusters'
      contexts:
        type: array
        items:
          $ref: '#/definitions/doks.Contexts'
      current-context:
        type: string
      kind:
        type: string
      preferences:
        $ref: '#/definitions/doks.Preference'
      users:
        type: array
        items:
          $ref: '#/definitions/doks.Users'
  doks.KubernetesNode:
    title: KubernetesNode
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      droplet_id:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
        format: datetime
  doks.KubernetesNodePool:
    title: KubernetesNodePool
    type: object
    properties:
      auto_scale:
        description: Autoscaling configuration, possible value 'true' or 'false' [required]
        type: boolean
      labels:
        description: Node pool labels, it would be key value pair [optional]
        additionalProperties:
          type: string
      machine_type:
        description: Machine type for pool [required]
        type: string
      max_nodes:
        description: Max VM count, must be greater than min count ['required' if autoscaling
          is enabled]
        type: integer
        format: int64
      min_nodes:
        description: Min VM count ['required' if autoscaling is enabled]
        type: integer
        format: int64
      name:
        description: Cluster pool name [required]
        type: string
      node_count:
        description: Pool node count [required]
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/doks.KubernetesNode'
      tags:
        description: Node pool tags [optional]
        type: array
        items:
          type: string
  doks.KubernetesNodePoolT:
    title: KubernetesNodePoolT
    type: object
    properties:
      auto_scale:
        type: boolean
      max_nodes:
        type: integer
        format: int64
      min_nodes:
        type: integer
        format: int64
      node_count:
        type: integer
        format: int32
      nodes:
        type: array
        items:
          $ref: '#/definitions/doks.KubernetesNode'
      size:
        type: string
  doks.KubernetesTemplate:
    title: KubernetesTemplate
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/doks.KubernetesNodePoolT'
      template_id:
        type: string
  doks.KubernetesTemplateMetadata:
    title: KubernetesTemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  doks.Preference:
    title: Preference
    type: object
  doks.ServerConfig:
    title: ServerConfig
    type: object
  doks.User:
    title: User
    type: object
    properties:
      token:
        type: string
  doks.Users:
    title: Users
    type: object
    properties:
      name:
        type: string
      user:
        $ref: '#/definitions/doks.User'
  gcp.AccountData:
    title: AccountData
    type: object
    properties:
      auth_provider_x509_cert_url:
        type: string
      auth_uri:
        type: string
      client_email:
        type: string
      client_id:
        type: string
      client_x509_cert_url:
        type: string
      private_key:
        type: string
      private_key_id:
        type: string
      project_id:
        type: string
      token_uri:
        type: string
      type:
        type: string
  gcp.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  gcp.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gcp.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
      vpc_name:
        type: string
  gcp.GcpCredentials:
    title: GcpCredentials
    type: object
    properties:
      account_data:
        $ref: '#/definitions/gcp.AccountData'
      raw_account_data:
        type: string
      region:
        type: string
      zone:
        type: string
  gcp.Image:
    title: Image
    type: object
    properties:
      family:
        type: string
      project:
        type: string
  gcp.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: string
      name:
        type: string
      node_state:
        type: string
      private_ip:
        type: string
      public_ip:
        type: string
      url:
        type: string
      user_name:
        type: string
  gcp.NodePool:
    title: NodePool
    type: object
    properties:
      auto_scaling:
        $ref: '#/definitions/gcp.AutoScaling'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/gcp.Image'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/gcp.Node'
      pool_id:
        type: string
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      root_volume:
        $ref: '#/definitions/gcp.Volume'
      service_account_email:
        type: string
      subnet_id:
        type: string
      tags:
        type: array
        items:
          type: string
      volume:
        $ref: '#/definitions/gcp.Volume'
  gcp.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      auto_scaling:
        $ref: '#/definitions/gcp.AutoScaling'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/gcp.Image'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/gcp.Node'
      pool_id:
        type: string
      pool_role:
        type: string
      root_volume:
        $ref: '#/definitions/gcp.Volume'
      subnet_id:
        type: string
      volume:
        $ref: '#/definitions/gcp.Volume'
  gcp.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gcp.NodePoolT'
      template_id:
        type: string
      vpc_name:
        type: string
  gcp.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  gcp.Volume:
    title: Volume
    type: object
    properties:
      disk_size:
        type: integer
        format: int64
      disk_type:
        $ref: '#/definitions/models.GCPDiskType'
      is_blank:
        type: boolean
  gke.AcceleratorConfig:
    title: AcceleratorConfig
    type: object
    properties:
      accelerator_count:
        type: integer
        format: int64
      accelerator_type:
        type: string
  gke.AddonsConfig:
    title: AddonsConfig
    type: object
    properties:
      horizontal_pod_autoscaling:
        $ref: '#/definitions/gke.HorizontalPodAutoscaling'
      http_load_balancing:
        $ref: '#/definitions/gke.HttpLoadBalancing'
      kubernetes_dashboard:
        $ref: '#/definitions/gke.KubernetesDashboard'
      network_policy_config:
        $ref: '#/definitions/gke.NetworkPolicyConfig'
  gke.AutoUpgradeOptions:
    title: AutoUpgradeOptions
    type: object
    properties:
      auto_upgrade_start_time:
        type: string
      description:
        type: string
  gke.BigQueryDestination:
    title: BigQueryDestination
    type: object
    properties:
      dataset_id:
        type: string
  gke.CidrBlock:
    title: CidrBlock
    type: object
    properties:
      cidr_block:
        type: string
      display_name:
        type: string
  gke.ClientCertificateConfig:
    title: ClientCertificateConfig
    type: object
    properties:
      issue_client_certificate:
        type: boolean
  gke.ConsumptionMeteringConfig:
    title: ConsumptionMeteringConfig
    type: object
    properties:
      enabled:
        type: boolean
  gke.DailyMaintenanceWindow:
    title: DailyMaintenanceWindow
    type: object
    properties:
      duration:
        type: string
      start_time:
        type: string
  gke.GKECluster:
    title: GKECluster
    type: object
    properties:
      addons_config:
        $ref: '#/definitions/gke.AddonsConfig'
      cloud:
        $ref: '#/definitions/models.Cloud'
      cloud_status:
        description: The current status of this cluster [readonly]
        type: string
      cluster_ipv4_cidr:
        description: The IP address range of the container pods in this cluster [optional]
        type: string
      company_id:
        description: ID of compnay [optional]
        type: string
      conditions:
        type: array
        items:
          $ref: '#/definitions/gke.StatusCondition'
      create_time:
        description: The time the cluster was created [readonly]
        type: string
      current_master_version:
        description: The current software version of master endpoint [readonly]
        type: string
      current_node_count:
        description: The number of nodes currently in the cluster [readonly]
        type: integer
        format: int64
      default_max_pods_constraint:
        $ref: '#/definitions/gke.MaxPodsConstraint'
      description:
        description: An optional description of this cluster [optional]
        type: string
      enable_kubernetes_alpha:
        description: Alpha enabled clusters are automatically deleted thirty days
          after [optional]
        type: boolean
      enable_tpu:
        description: Enable the ability to use Cloud TPUs in this cluster [optional]
        type: boolean
      endpoint:
        description: IP address of this cluster's master endpoint [readonly]
        type: string
      expire_time:
        description: Time the cluster will be automatically deleted [readonly]
        type: string
      initial_cluster_version:
        description: Initial kubernetes version for this cluster [optional]
        type: string
      ip_allocation_policy:
        $ref: '#/definitions/gke.IPAllocationPolicy'
      is_advance:
        type: boolean
      is_expert:
        type: boolean
      label_fingerprint:
        description: The fingerprint of the set of labels for this cluster [optional]
        type: string
      legacy_abac:
        $ref: '#/definitions/gke.LegacyAbac'
      location:
        description: The name of GCP zone or region in which cluster resides [required]
        type: string
      locations:
        description: The name of GCP zones in which cluster nodes located [optional]
        type: array
        items:
          type: string
      logging_service:
        description: The logging service the cluster should use to write logs [optional]
        type: string
      maintenance_policy:
        $ref: '#/definitions/gke.MaintenancePolicy'
      master_auth:
        $ref: '#/definitions/gke.MasterAuth'
      master_authorized_networks_config:
        $ref: '#/definitions/gke.MasterAuthorizedNetworksConfig'
      monitoring_service:
        description: The monitoring service the cluster should use to write metrics
          [optional]
        type: string
      name:
        description: The name of this cluster [required]
        type: string
      network:
        description: The name of GCP network to which the cluster connected [required]
        type: string
      network_config:
        $ref: '#/definitions/gke.NetworkConfig'
      network_policy:
        $ref: '#/definitions/gke.NetworkPolicy'
      node_ipv4_cidr_size:
        description: The size of the address space on each node [readonly]
        type: integer
        format: int64
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gke.NodePool'
      private_cluster_config:
        $ref: '#/definitions/gke.PrivateClusterConfig'
      project_id:
        description: ID of project [required]
        type: string
      resource_labels:
        additionalProperties:
          type: string
      resource_usage_export_config:
        $ref: '#/definitions/gke.ResourceUsageExportConfig'
      self_link:
        description: Server-defined URL for the resource [readonly]
        type: string
      services_ipv4_cidr:
        description: The IP address range of the kubernetes services in the cluster
          [readonly]
        type: string
      status:
        $ref: '#/definitions/models.Type'
        description: Status of cluster [required]
      status_message:
        description: Additional information about the current status [readonly]
        type: string
      subnetwork:
        description: The name of the GCP subnetwork cluster is connected to [required]
        type: string
      tpu_ipv4_cidr_block:
        description: The IP address range of the Cloud TPUs in the cluster [readonly]
        type: string
      zone:
        description: Name of GCP zone in which cluster resides [required]
        type: string
  gke.GKEClusterTemplate:
    title: GKEClusterTemplate
    type: object
    properties:
      addons_config:
        $ref: '#/definitions/gke.AddonsConfig'
      cloud:
        $ref: '#/definitions/models.Cloud'
      cloud_status:
        type: string
      cluster_ipv4_cidr:
        type: string
      company_id:
        type: string
      conditions:
        type: array
        items:
          $ref: '#/definitions/gke.StatusCondition'
      create_time:
        type: string
      current_master_version:
        type: string
      default_max_pods_constraint:
        $ref: '#/definitions/gke.MaxPodsConstraint'
      description:
        type: string
      enable_kubernetes_alpha:
        type: boolean
      enable_tpu:
        type: boolean
      endpoint:
        type: string
      expire_time:
        type: string
      initial_cluster_version:
        type: string
      ip_allocation_policy:
        $ref: '#/definitions/gke.IPAllocationPolicy'
      is_cloudplex:
        type: boolean
      label_fingerprint:
        type: string
      legacy_abac:
        $ref: '#/definitions/gke.LegacyAbac'
      location:
        type: string
      locations:
        type: array
        items:
          type: string
      logging_service:
        type: string
      maintenance_policy:
        $ref: '#/definitions/gke.MaintenancePolicy'
      master_auth:
        $ref: '#/definitions/gke.MasterAuth'
      master_authorized_networks_config:
        $ref: '#/definitions/gke.MasterAuthorizedNetworksConfig'
      monitoring_service:
        type: string
      name:
        type: string
      network:
        type: string
      network_config:
        $ref: '#/definitions/gke.NetworkConfig'
      network_policy:
        $ref: '#/definitions/gke.NetworkPolicy'
      node_ipv4_cidr_size:
        type: integer
        format: int64
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gke.NodePool'
      private_cluster_config:
        $ref: '#/definitions/gke.PrivateClusterConfig'
      resource_labels:
        additionalProperties:
          type: string
      resource_usage_export_config:
        $ref: '#/definitions/gke.ResourceUsageExportConfig'
      self_link:
        type: string
      services_ipv4_cidr:
        type: string
      status:
        type: string
      status_message:
        type: string
      subnetwork:
        type: string
      template_id:
        type: string
      tpu_ipv4_cidr_block:
        type: string
      zone:
        type: string
  gke.GKEClusterTemplateMetadata:
    title: GKEClusterTemplateMetadata
    type: object
  gke.HorizontalPodAutoscaling:
    title: HorizontalPodAutoscaling
    type: object
    properties:
      disabled:
        description: Whether the Horizontal Pod Autoscaling feature is enabled in
          cluster [optional]
        type: boolean
  gke.HttpLoadBalancing:
    title: HttpLoadBalancing
    type: object
    properties:
      disabled:
        description: Whether the HTTP Load Balancing controller is enabled in cluster
          [optional]
        type: boolean
  gke.IPAllocationPolicy:
    title: IPAllocationPolicy
    type: object
    properties:
      cluster_ipv4_cidr:
        type: string
      cluster_ipv4_cidr_block:
        type: string
      cluster_secondary_range_name:
        type: string
      create_subnetwork:
        type: boolean
      node_ipv4_cidr:
        type: string
      node_ipv4_cidr_block:
        type: string
      services_ipv4_cidr:
        type: string
      services_ipv4_cidr_block:
        type: string
      services_secondary_range_name:
        type: string
      subnetwork_name:
        type: string
      tpu_ipv4_cidr_block:
        type: string
      use_ip_aliases:
        type: boolean
  gke.KubernetesDashboard:
    title: KubernetesDashboard
    type: object
    properties:
      disabled:
        description: Whether the Kubernetes Dashboard is enabled for this cluster
          [optional]
        type: boolean
  gke.LegacyAbac:
    title: LegacyAbac
    type: object
    properties:
      enabled:
        type: boolean
  gke.MaintenancePolicy:
    title: MaintenancePolicy
    type: object
    properties:
      window:
        $ref: '#/definitions/gke.MaintenanceWindow'
  gke.MaintenanceWindow:
    title: MaintenanceWindow
    type: object
    properties:
      daily_maintenance_window:
        $ref: '#/definitions/gke.DailyMaintenanceWindow'
  gke.MasterAuth:
    title: MasterAuth
    type: object
    properties:
      client_certificate:
        type: string
      client_certificate_config:
        $ref: '#/definitions/gke.ClientCertificateConfig'
      client_key:
        type: string
      cluster_ca_certificate:
        type: string
      password:
        type: string
      username:
        type: string
  gke.MasterAuthorizedNetworksConfig:
    title: MasterAuthorizedNetworksConfig
    type: object
    properties:
      cidr_blocks:
        type: array
        items:
          $ref: '#/definitions/gke.CidrBlock'
      enabled:
        type: boolean
  gke.MaxPodsConstraint:
    title: MaxPodsConstraint
    type: object
    properties:
      max_pods_per_node:
        description: Constraint enforced on the max num of pods per node [required]
        type: integer
        format: int64
  gke.NetworkConfig:
    title: NetworkConfig
    type: object
    properties:
      network:
        type: string
      subnetwork:
        type: string
  gke.NetworkPolicy:
    title: NetworkPolicy
    type: object
    properties:
      enabled:
        type: boolean
      provider:
        type: string
  gke.NetworkPolicyConfig:
    title: NetworkPolicyConfig
    type: object
    properties:
      disabled:
        description: Whether NetworkPolicy is enabled for this cluster [optional]
        type: boolean
  gke.NodeConfig:
    title: NodeConfig
    type: object
    properties:
      accelerators:
        type: array
        items:
          $ref: '#/definitions/gke.AcceleratorConfig'
      disk_size_gb:
        type: integer
        format: int64
      disk_type:
        type: string
      image_type:
        type: string
      labels:
        additionalProperties:
          type: string
      local_ssd_count:
        type: integer
        format: int64
      machine_type:
        type: string
      metadata:
        additionalProperties:
          type: string
      min_cpu_platform:
        type: string
      oauth_scopes:
        type: array
        items:
          type: string
      preemptible:
        type: boolean
      service_account:
        type: string
      tags:
        type: array
        items:
          type: string
      taints:
        type: array
        items:
          $ref: '#/definitions/gke.NodeTaint'
  gke.NodeManagement:
    title: NodeManagement
    type: object
    properties:
      auto_repair:
        type: boolean
      auto_upgrade:
        type: boolean
      upgrade_options:
        $ref: '#/definitions/gke.AutoUpgradeOptions'
  gke.NodePool:
    title: NodePool
    type: object
    properties:
      autoscaling:
        $ref: '#/definitions/gke.NodePoolAutoscaling'
      conditions:
        type: array
        items:
          $ref: '#/definitions/gke.StatusCondition'
      config:
        $ref: '#/definitions/gke.NodeConfig'
      initial_node_count:
        type: integer
        format: int64
      instance_group_urls:
        type: array
        items:
          type: string
      management:
        $ref: '#/definitions/gke.NodeManagement'
      max_pods_constraint:
        $ref: '#/definitions/gke.MaxPodsConstraint'
      name:
        type: string
      pod_ipv4_cidr_size:
        type: integer
        format: int64
      self_link:
        type: string
      status:
        type: string
      status_message:
        type: string
      version:
        type: string
  gke.NodePoolAutoscaling:
    title: NodePoolAutoscaling
    type: object
    properties:
      enabled:
        type: boolean
      max_node_count:
        type: integer
        format: int64
      min_node_count:
        type: integer
        format: int64
  gke.NodeTaint:
    title: NodeTaint
    type: object
    properties:
      effect:
        type: string
      key:
        type: string
      value:
        type: string
  gke.PrivateClusterConfig:
    title: PrivateClusterConfig
    type: object
    properties:
      enable_private_endpoint:
        type: boolean
      enable_private_nodes:
        type: boolean
      master_ipv4_cidr_block:
        type: string
      private_endpoint:
        type: string
      public_endpoint:
        type: string
  gke.ResourceUsageExportConfig:
    title: ResourceUsageExportConfig
    type: object
    properties:
      bigquery_destination:
        $ref: '#/definitions/gke.BigQueryDestination'
      consumption_metering_config:
        $ref: '#/definitions/gke.ConsumptionMeteringConfig'
      enable_network_egress_metering:
        type: boolean
  gke.ServerConfig:
    title: ServerConfig
    type: object
  gke.StatusCondition:
    title: StatusCondition
    type: object
    properties:
      code:
        type: string
      message:
        type: string
  godo.Region:
    title: Region
    type: object
  iks.AllInstancesResponse:
    title: AllInstancesResponse
    type: object
    properties:
      Profile:
        type: array
        items:
          $ref: '#/definitions/iks.InstanceProfile'
  iks.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        description: ID of compnay [optional]
        type: string
      disable_public_service_endpoint:
        description: '[optional]'
        type: boolean
      is_advance:
        type: boolean
      kube_version:
        description: Kubernetes version to be provisioned [required]
        type: string
      name:
        description: Cluster name [required]
        type: string
      network_name:
        description: Network name in which cluster will be provisioned [required]
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/iks.NodePool'
      project_id:
        description: ID of project [required]
        type: string
      resource_group:
        description: Resources would be created within resource_group [required]
        type: string
      status:
        $ref: '#/definitions/models.Type'
        description: Status of cluster [required]
      vpc_id:
        description: Virtual private cloud ID in which cluster will be provisioned
          [required]
        type: string
  iks.InstanceProfile:
    title: InstanceProfile
    type: object
    properties:
      Id:
        type: string
      Name:
        type: string
  iks.KubeWorkerPoolStatus:
    title: KubeWorkerPoolStatus
    type: object
    properties:
      flavour:
        type: string
      id:
        type: string
      poolName:
        type: string
      state:
        type: string
  iks.Kubernetes:
    title: Kubernetes
    type: object
    properties:
      major:
        type: integer
        format: int64
      minor:
        type: integer
        format: int64
      patch:
        type: integer
        format: int64
  iks.NodePool:
    title: NodePool
    type: object
    properties:
      availability_zone:
        type: string
      machine_type:
        description: Machine type for pool [required]
        type: string
      name:
        description: Cluster pool name [required]
        type: string
      node_count:
        description: Pool node count [required]
        type: integer
        format: int64
      subnet_id:
        description: ID of subnet in which pool will be created [required]
        type: string
  iks.Regions:
    title: Regions
    type: object
    properties:
      Location:
        type: string
      Name:
        type: string
      Zones:
        type: array
        items:
          type: string
  iks.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      disable_public_service_endpoint:
        type: boolean
      is_cloudplex:
        type: boolean
      kube_credentials:
        $ref: '#/definitions/51173.0xc0014e8a50.false'
      kube_version:
        type: string
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/iks.NodePool'
      project_id:
        type: string
      resource_group:
        type: string
      status:
        type: string
      template_id:
        type: string
      token_name:
        type: string
      vpc_id:
        type: string
  iks.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  iks.Versions:
    title: Versions
    type: object
    properties:
      kubernetes:
        type: array
        items:
          $ref: '#/definitions/iks.Kubernetes'
  iks.Zone:
    title: Zone
    type: object
  key_utils.AWSKey:
    title: AWSKey
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      key_name:
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
      private_key:
        type: string
  key_utils.AZUREKey:
    title: AZUREKey
    type: object
    properties:
      admin_password:
        description: It is the password ['required' if credentials_type is 'password']
        type: string
      cloud:
        $ref: '#/definitions/models.Cloud'
        description: Type of cloud [optional]
      credential_type:
        $ref: '#/definitions/models.CredentialsType'
        description: It is type of credentials used for ssh. By default value is 'key'
          [optional]
      finger_print:
        description: Finger prints for the key [optional]
        type: string
      key_name:
        description: Name of the key. By default value is 'new' [required]
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
        description: It is type key. By default value is 'new' [required]
      private_key:
        description: Private key for ssh ['required' if credentials_type is 'key']
        type: string
      public_key:
        description: Public key for ssh [readonly]
        type: string
      username:
        description: It is the user name ['required' if credentials_type is 'password']
        type: string
  models.Cloud:
    title: Cloud
    type: string
    enum:
    - AWS = "aws"
    - Azure = "azure"
    - GCP = "gcp"
    - GKE = "gke"
    - DO = "do"
    - DOKS = "doks"
    - IKS = "iks"
    - OP = "op"
    - AKS = "aks"
    example: aws
  models.CredentialsType:
    title: CredentialsType
    type: string
    enum:
    - Password = "password"
    - SSHKey = "key"
    example: password
  models.GCPDiskType:
    title: GCPDiskType
    type: string
    enum:
    - PdStandard = "pd-standard"
    - PdSSD = "pd-ssd"
    example: pd-standard
  models.KeyType:
    title: KeyType
    type: string
    enum:
    - NEWKey = "new"
    - CPKey = "cp"
    - AWSKey = "aws"
    - AZUREKey = "azure"
    - USERKey = "user"
    example: new
  models.Machine:
    title: Machine
    type: object
    properties:
      Cores:
        type: integer
        format: int64
      InstanceType:
        type: string
  models.OsDiskType:
    title: OsDiskType
    type: string
    enum:
    - StandardHDD = "standard hdd"
    - StandardSSD = "standard ssd"
    - PremiumSSD = "premium ssd"
    example: standard hdd
  models.PoolRole:
    title: PoolRole
    type: string
    enum:
    - Master = "master"
    - Slave = "slave"
    example: master
  models.Type:
    title: Type
    type: string
    enum:
    - New = "New"
    - Created = "created"
    - ClusterCreated = "Cluster Created"
    - ClusterCreationFailed = "Cluster Creation Failed"
    - ClusterTerminationFailed = "Cluster Termination Failed"
    - ClusterTerminated = "Cluster Terminated"
    - Deploying = "Creating"
    - Terminating = "Terminating"
    example: New
  op.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      company_id:
        description: ID of company which you are belong to [optional]
        type: string
      name:
        description: Name of cluster [required]
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/op.NodePool'
      project_id:
        description: ID of project [required]
        type: string
      status:
        description: Cluster status can be New, Cluster Created, Cluster Terminated.
          By default value will be 'New' [readonly]
        type: string
  op.Node:
    title: Node
    type: object
    properties:
      name:
        description: Name of node [required]
        type: string
      private_ip:
        description: Private IP of node [readonly]
        type: string
      public_ip:
        description: Public IP of node [readonly]
        type: string
      user_name:
        description: User name which will be used for ssh into machine [required]
        type: string
  op.NodePool:
    title: NodePool
    type: object
    properties:
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      name:
        description: Name of node pool [required]
        type: string
      node_count:
        description: Count of node pool [required]
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/op.Node'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
        description: Pool role can be master or slave [required]
  op.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/op.NodeT'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
  op.NodeT:
    title: NodeT
    type: object
    properties:
      name:
        type: string
      private_ip:
        type: string
      public_ip:
        type: string
      user_name:
        type: string
  op.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      kube_credentials:
        $ref: '#/definitions/13859.0xc001565260.false'
      name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/op.NodePoolT'
      status:
        type: string
      template_id:
        type: string
      token_name:
        type: string
  "true":
    title: "true"
    type: object
  vault.AwsCredentials:
    title: AwsCredentials
    type: object
    properties:
      access_key:
        type: string
      access_secret:
        type: string
      region:
        type: string
  vault.AzureCredentials:
    title: AzureCredentials
    type: object
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      region:
        type: string
      subscription_id:
        type: string
      tenant_id:
        type: string
  vault.IBMCredentials:
    title: IBMCredentials
    type: object
    properties:
      iam_key:
        type: string
      region:
        type: string
tags:
- name: health
  description: |
    health endpoint
- name: customerTemplate
  description: |
    customer template endpoint
- name: template/op
  description: |
    Operations about OP template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/op
  description: |
    Operations about OP cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/aws
  description: |
    Operations about AWS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/aws
  description: |
    Operations about AWS cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: cluster/azure
  description: |
    Operations about azure cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/azure
  description: |
    Operations about Azure template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/gcp
  description: |
    Operations about Gcp cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/gcp
  description: |
    Operations about Gcp template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/gke
  description: |
    Operations about GKE cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/gke
  description: |
    Operations about GKE template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: template/do
  description: |
    Operations about DO template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/do
  description: |
    Operations about DO cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/iks
  description: |
    Operations about Gcp template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/iks
  description: |
    Operations about ikscluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/doks
  description: |
    Operations about DOKS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: template/op
  description: |
    Operations about OP template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/op
  description: |
    Operations about OP cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/aks
  description: |
    Operations about AKS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/aks
  description: |
    Operations about AKS cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
