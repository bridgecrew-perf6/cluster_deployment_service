swagger: "2.0"
info:
  title: antelope API
  description: cloudPlex CNAP node pool solution
  version: 1.0.0
  termsOfService: https://cloudplex.io/
  contact:
    email: info@cloudplex.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /antelope
paths:
  /cluster/aws/:
    put:
      tags:
      - cluster/aws
      description: update an existing cluster
      operationId: AWSClusterController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aws.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "405":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/aws
      description: create a new cluster
      operationId: AWSClusterController.Create
      parameters:
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/aws.Cluster_Def'
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"msg": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "cluster against this project already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/{projectId}:
    delete:
      tags:
      - cluster/aws
      description: delete a cluster
      operationId: AWSClusterController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: project id of the cluster
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/{projectId}/:
    get:
      tags:
      - cluster/aws
      description: get cluster
      operationId: AWSClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/aws/all:
    get:
      tags:
      - cluster/aws
      description: get all the clusters
      operationId: AWSClusterController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/amis/{amiId}:
    get:
      tags:
      - cluster/aws
      description: returns aws ami details
      operationId: AWSClusterController.AwsAmis
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Region
        description: "false"
        type: string
      - in: path
        name: amiId
        description: Id of the ami
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/*ec2.BlockDeviceMapping'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "ami id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/enablescaling/{projectId}/:
    post:
      tags:
      - cluster/aws
      description: enables autoscaling
      operationId: AWSClusterController.EnableScaling
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster autoscaled successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/machine/info:
    get:
      tags:
      - cluster/aws
      description: Get AWS Machine instance cores
      operationId: AWSClusterController.GetCores
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Machine'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkey/{keyname}:
    delete:
      tags:
      - cluster/aws
      description: Delete SSH key
      operationId: AWSClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Region
        description: X-Region
        type: string
      responses:
        "200":
          description: '{"msg": "key deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "User is unauthorized to perform this action"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkey/{projectId}/{keyname}:
    post:
      tags:
      - cluster/aws
      description: Generates new SSH key
      operationId: AWSClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: header
        name: X-Region
        description: X-Region
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AWSKey'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/sshkeys:
    get:
      tags:
      - cluster/aws
      description: returns ssh key pairs
      operationId: AWSClusterController.SSHKeyPair
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Region
        description: X-Region
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/start/{projectId}:
    post:
      tags:
      - cluster/aws
      description: starts a  cluster
      operationId: AWSClusterController.Start
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/status/{projectId}/:
    get:
      tags:
      - cluster/aws
      description: returns status of nodes
      operationId: AWSClusterController.Status
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/aws/terminate/{projectId}/:
    post:
      tags:
      - cluster/aws
      description: terminates a  cluster
      operationId: AWSClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        schema:
          $ref: '#/definitions/X-Profile-Id'
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/:
    put:
      tags:
      - cluster/azure
      description: update an existing cluster
      operationId: AzureClusterController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: subscription_id
        description: token
        schema:
          $ref: '#/definitions/subscriptionId'
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/azure.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no cluster exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/azure
      description: create a new cluster
      operationId: AzureClusterController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/azure.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"msg": "error message"}'
        "401":
          description: '{"msg": "error message"}'
        "404":
          description: '{"msg": "error message"}'
        "409":
          description: '{"error": "cluster against same project id already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/{projectId}:
    delete:
      tags:
      - cluster/azure
      description: delete a cluster
      operationId: AzureClusterController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: project id of the cluster
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/{projectId}/:
    get:
      tags:
      - cluster/azure
      description: get cluster
      operationId: AzureClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/azure/all:
    get:
      tags:
      - cluster/azure
      description: get all the clusters
      operationId: AzureClusterController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/getAllInstances:
    get:
      tags:
      - cluster/azure
      description: Getting All Instances
      operationId: AzureClusterController.Get Instances
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      - in: header
        name: region
        description: "false"
        type: string
      responses:
        "200":
          description: '[]compute.VirtualMachines'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/machine/info:
    get:
      tags:
      - cluster/azure
      description: Get Azure Machine instance cores
      operationId: AzureClusterController.GetCores
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Machine'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkey/{keyname}:
    delete:
      tags:
      - cluster/azure
      description: Delete SSH key
      operationId: AzureClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": key deleted successfully}'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkey/{keyname}/{projectId}:
    post:
      tags:
      - cluster/azure
      description: Generates new SSH key
      operationId: AzureClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "404":
          description: '{"error": "error message"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/sshkeys:
    get:
      tags:
      - cluster/azure
      description: returns ssh key pairs
      operationId: AzureClusterController.SSHKeyPair
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/start/{projectId}:
    post:
      tags:
      - cluster/azure
      description: starts a  cluster
      operationId: AzureClusterController.Start
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/status/{projectId}/:
    get:
      tags:
      - cluster/azure
      description: returns status of nodes
      operationId: AzureClusterController.Status
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/azure/terminate/{projectId}/:
    post:
      tags:
      - cluster/azure
      description: terminates a  cluster
      operationId: AzureClusterController.Terminate
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: "false"
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/:
    put:
      tags:
      - cluster/do
      description: update an existing cluster
      operationId: DOClusterController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/do.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "405":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/do
      description: create a new cluster
      operationId: DOClusterController.Create
      parameters:
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/do.Cluster_Def'
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"msg": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "cluster against this project already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/{projectId}:
    delete:
      tags:
      - cluster/do
      description: delete a cluster
      operationId: DOClusterController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: project id of the cluster
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/{projectId}/:
    get:
      tags:
      - cluster/do
      description: get cluster
      operationId: DOClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/all:
    get:
      tags:
      - cluster/do
      description: get all the clusters
      operationId: DOClusterController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/getregions/:
    get:
      tags:
      - cluster/do
      description: return regions and their supported machine sizes
      operationId: DOClusterController.GetRegions
      parameters:
      - in: header
        name: profileid
        description: profile of DO
        required: true
        type: string
      - in: header
        name: token
        description: "true"
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/godo.Region'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/sshkey/{keyname}:
    delete:
      tags:
      - cluster/do
      description: Delete SSH key
      operationId: DOClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "key deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "User is unauthorized to perform this action"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/do/sshkey/{projectId}/{keyname}:
    post:
      tags:
      - cluster/do
      description: Generates new SSH key
      operationId: DOClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: header
        name: X-Region
        description: X-Region
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/sshkeys:
    get:
      tags:
      - cluster/do
      description: returns ssh key pairs
      operationId: DOClusterController.SSHKeyPair
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/start/{projectId}:
    post:
      tags:
      - cluster/do
      description: starts a  cluster
      operationId: DOClusterController.Start
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/status/{projectId}/:
    get:
      tags:
      - cluster/do
      description: returns status of nodes
      operationId: DOClusterController.Status
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: profileId
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/do/terminate/{projectId}/:
    post:
      tags:
      - cluster/do
      description: terminates a  cluster
      operationId: DOClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: profileId
        schema:
          $ref: '#/definitions/X-Profile-Id'
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/:
    put:
      tags:
      - cluster/gcp
      description: update an existing cluster
      operationId: GcpClusterController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gcp.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "402":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no cluster exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - cluster/gcp
      description: create a new cluster
      operationId: GcpClusterController.Create
      parameters:
      - in: header
        name: subscription_id
        description: subscriptionId
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for cluster content
        required: true
        schema:
          $ref: '#/definitions/gcp.Cluster_Def'
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "cluster against same project id already exists"}'
        "410":
          description: '{"error": "Core limit exceeded"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/{projectId}:
    delete:
      tags:
      - cluster/gcp
      description: delete a cluster
      operationId: GcpClusterController.Delete
      parameters:
      - in: path
        name: projectId
        description: project id of the cluster
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/{projectId}/:
    get:
      tags:
      - cluster/gcp
      description: get cluster
      operationId: GcpClusterController.Get
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/all:
    get:
      tags:
      - cluster/gcp
      description: get all the clusters
      operationId: GcpClusterController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/getallmachines/{region}/{zone}:
    get:
      tags:
      - cluster/gcp
      description: return machines against a region and zone
      operationId: GcpClusterController.GetAllMachines
      parameters:
      - in: header
        name: profileid
        description: profile of GCP
        required: true
        type: string
      - in: header
        name: token
        description: "true"
        type: string
      - in: path
        name: region
        description: region of GCP
        required: true
        type: string
      - in: path
        name: zone
        description: zone of GCP
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Machines'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/gcp/getzones/{region}:
    get:
      tags:
      - cluster/gcp
      description: return zones against a region
      operationId: GcpClusterController.GetZonesAgainstRegion
      parameters:
      - in: header
        name: profileid
        description: profile of GCP
        required: true
        type: string
      - in: header
        name: token
        description: "true"
        type: string
      - in: path
        name: region
        description: region of GCP
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
  /cluster/gcp/machine/info:
    get:
      tags:
      - cluster/gcp
      description: Get GCP Machine instance cores
      operationId: GcpClusterController.GetCores
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Machine'
        "500":
          description: '{"error":  "error msg"}'
  /cluster/gcp/serviceaccounts:
    get:
      tags:
      - cluster/gcp
      description: returns list of service account emails
      operationId: GcpClusterController.ListServiceAccounts
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "profile id is empty"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "500":
          description: '{"error":  "error msg"}'
  /cluster/gcp/sshkey/{keyname}:
    delete:
      tags:
      - cluster/gcp
      description: Delete SSH key
      operationId: GcpClusterController.DeleteSSHKey
      parameters:
      - in: path
        name: keyname
        description: "true"
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": key deleted successfully}'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": error msg}'
  /cluster/gcp/sshkey/{keyname}/{username}/{projectId}:
    post:
      tags:
      - cluster/gcp
      description: Generates new SSH key
      operationId: GcpClusterController.CreateSSHKey
      parameters:
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: path
        name: keyname
        description: SSHKey
        required: true
        type: string
      - in: path
        name: username
        description: UserName
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/key_utils.AZUREKey'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/sshkeys:
    get:
      tags:
      - cluster/gcp
      description: returns ssh key pairs
      operationId: GcpClusterController.SSHKeyPair
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              type: string
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/start/{projectId}:
    post:
      tags:
      - cluster/gcp
      description: starts a  cluster
      operationId: GcpClusterController.Start
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "cluster created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/status/{projectId}/:
    get:
      tags:
      - cluster/gcp
      description: returns status of nodes
      operationId: GcpClusterController.Status
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Cluster_Def'
        "206":
          description: '{object} gcp.Cluster_Def'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "authorization params missing or invalid"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /cluster/gcp/terminate/{projectId}/:
    post:
      tags:
      - cluster/gcp
      description: terminates a  cluster
      operationId: GcpClusterController.Terminate
      parameters:
      - in: header
        name: X-Profile-Id
        description: vault credentials profile id
        required: true
        type: string
      - in: path
        name: projectId
        description: Id of the project
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "cluster terminated successfully"}'
        "400":
          description: '{"error": "error_msg"}'
        "401":
          description: '{"error": "Authorization format should be ''base64 encoded
            service_account_json''"}'
        "404":
          description: '{"error": "error_msg"}'
        "500":
          description: '{"error": "error msg"}'
  /customerTemplate/register:
    post:
      tags:
      - customerTemplate
      description: register customer templates
      operationId: CustomerTempalteController.Post
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /health/:
    get:
      tags:
      - health
      description: get health
      operationId: HealthController.Get
      responses:
        "200":
          description: '"alive!"'
  /template/aws/:
    put:
      tags:
      - template/aws
      description: update an existing template
      operationId: AWSTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aws
      description: create a new template
      operationId: AWSTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/{templateId}:
    delete:
      tags:
      - template/aws
      description: delete a templates
      operationId: AWSTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/{templateId}/:
    get:
      tags:
      - template/aws
      description: get template
      operationId: AWSTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/all:
    get:
      tags:
      - template/aws
      description: get all the templates
      operationId: AWSTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allCustomerTemplates:
    get:
      tags:
      - template/aws
      description: get all the customer templates
      operationId: AWSTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allCustomerTemplatesInfo:
    get:
      tags:
      - template/aws
      description: get all the customer templates info
      operationId: AWSTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/aws.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/allTemplatesInfo:
    get:
      tags:
      - template/aws
      description: get all the templates info
      operationId: AWSTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/customerTemplate:
    put:
      tags:
      - template/aws
      description: update an existing customer template
      operationId: AWSTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/aws
      description: create a new customer template
      operationId: AWSTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/aws.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error message"}'
        "401":
          description: '{"error": "error message"}'
        "404":
          description: '{"error": "error message"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/aws/customerTemplate/{templateId}:
    get:
      tags:
      - template/aws
      description: get customer template
      operationId: AWSTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/aws.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/aws
      description: delete a customer template
      operationId: AWSTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/:
    put:
      tags:
      - template/azure
      description: update an existing template
      operationId: AzureTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/azure
      description: create a new template
      operationId: AzureTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/{templateId}:
    get:
      tags:
      - template/azure
      description: get template
      operationId: AzureTemplateController.Get
      parameters:
      - in: path
        name: name
        description: Name of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/azure
      description: delete a templates
      operationId: AzureTemplateController.Delete
      parameters:
      - in: path
        name: name
        description: Name of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/all:
    get:
      tags:
      - template/azure
      description: get all the templates
      operationId: AzureTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allCustomerTemplates:
    get:
      tags:
      - template/azure
      description: get all the customer templates
      operationId: AzureTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allCustomerTemplatesInfo:
    get:
      tags:
      - template/azure
      description: get all customer templates info
      operationId: AzureTemplateController.Get All Customer Templates Info
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/allTemplatesInfo:
    get:
      tags:
      - template/azure
      description: get all templates info
      operationId: AzureTemplateController.Get All Templates Info
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/azure.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/customerTemplate:
    put:
      tags:
      - template/azure
      description: update an existing customer template
      operationId: AzureTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/azure
      description: create a new customer template
      operationId: AzureTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/azure.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/azure/customerTemplate/{templateId}:
    get:
      tags:
      - template/azure
      description: get customer template
      operationId: AzureTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/azure.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/azure
      description: delete a customer template
      operationId: AzureTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/:
    put:
      tags:
      - template/do
      description: update an existing template
      operationId: DOTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/do
      description: create a new template
      operationId: DOTemplateController.Create
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/{templateId}:
    delete:
      tags:
      - template/do
      description: delete a template
      operationId: DOTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/{templateId}/:
    get:
      tags:
      - template/do
      description: get template
      operationId: DOTemplateController.Get
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/all:
    get:
      tags:
      - template/do
      description: get all the templates
      operationId: DOTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allCustomerTemplates:
    get:
      tags:
      - template/do
      description: get all the customer templates
      operationId: DOTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allCustomerTemplatesInfo:
    get:
      tags:
      - template/do
      description: get all the customer templates info
      operationId: DOTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/allTemplatesInfo:
    get:
      tags:
      - template/do
      description: get all the templates info
      operationId: DOTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/do.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/customerTemplate:
    put:
      tags:
      - template/do
      description: update an existing customer template
      operationId: DOTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/do
      description: create a new customer template
      operationId: DOTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/do.Template'
      responses:
        "200":
          description: '{"msg": "customer template created successfully"}'
        "400":
          description: '{"error": "error message"}'
        "401":
          description: '{"error": "error message"}'
        "404":
          description: '{"error": "error message"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/do/customerTemplate/{templateId}:
    get:
      tags:
      - template/do
      description: get customer template
      operationId: DOTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/do.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/do
      description: delete a customer template
      operationId: DOTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/:
    put:
      tags:
      - template/gcp
      description: update an existing template
      operationId: GcpTemplateController.Update
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gcp
      description: create a new template
      operationId: GcpTemplateController.Create
      parameters:
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: teams
        type: string
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/{templateId}:
    get:
      tags:
      - template/gcp
      description: get template
      operationId: GcpTemplateController.Get
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Id of the template
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Template'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gcp
      description: delete a templates
      operationId: GcpTemplateController.Delete
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: Name of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "name is empty"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/all:
    get:
      tags:
      - template/gcp
      description: get all the templates
      operationId: GcpTemplateController.Get All
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allCustomerTemplates:
    get:
      tags:
      - template/gcp
      description: get all the customer templates
      operationId: GcpTemplateController.Get All Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allCustomerTemplatesInfo:
    get:
      tags:
      - template/gcp
      description: get all the customer templates info
      operationId: GcpTemplateController.GetAllCustomerTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/allTemplatesInfo:
    get:
      tags:
      - template/gcp
      description: get all the templates info
      operationId: GcpTemplateController.GetAllTemplateInfo
      parameters:
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/gcp.TemplateMetadata'
        "400":
          description: '{"error": "error msg"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/customerTemplate:
    put:
      tags:
      - template/gcp
      description: update an existing customer template
      operationId: GcpTemplateController.Update customer templates
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: header
        name: teams
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "customer template updated successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "no template exists with this name"}'
        "500":
          description: '{"error": "error msg"}'
    post:
      tags:
      - template/gcp
      description: create a new customer template
      operationId: GcpTemplateController.Create Customer Template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: body
        name: body
        description: body for template content
        required: true
        schema:
          $ref: '#/definitions/gcp.Template'
      responses:
        "200":
          description: '{"msg": "template created successfully"}'
        "409":
          description: '{"error": "template with same name already exists"}'
        "500":
          description: '{"error": "error msg"}'
  /template/gcp/customerTemplate/{templateId}:
    get:
      tags:
      - template/gcp
      description: get customer template
      operationId: GcpTemplateController.Get customer template
      parameters:
      - in: path
        name: templateId
        description: Template Id of the template
        required: true
        type: string
      - in: header
        name: token
        description: token
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/gcp.Template'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "error msg"}'
    delete:
      tags:
      - template/gcp
      description: delete a customer template
      operationId: GcpTemplateController.Delete customer template
      parameters:
      - in: header
        name: token
        description: token
        type: string
      - in: path
        name: templateId
        description: template id of the template
        required: true
        type: string
      responses:
        "200":
          description: '{"msg": "customer template deleted successfully"}'
        "400":
          description: '{"error": "error msg"}'
        "401":
          description: '{"error": "error msg"}'
        "404":
          description: '{"error": "project id is empty"}'
        "500":
          description: '{"error": "error msg"}'
definitions:
  '*ec2.BlockDeviceMapping':
    title: BlockDeviceMapping
    type: object
  600.0xc0429d6b70.false:
    title: "false"
    type: object
  686.0xc042ca7f80.false:
    title: "false"
    type: object
  X-Profile-Id:
    title: X-Profile-Id
    type: object
  aws.Ami:
    title: Ami
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      ami_id:
        type: string
      name:
        type: string
      root_volume:
        $ref: '#/definitions/aws.Volume'
      username:
        type: string
  aws.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  aws.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      kube_credentials:
        $ref: '#/definitions/600.0xc0429d6b70.false'
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/aws.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
  aws.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: string
      key_name:
        type: string
      name:
        type: string
      node_state:
        type: string
      private_dns:
        type: string
      private_ip:
        type: string
      public_dns:
        type: string
      public_ip:
        type: string
      ssh_key:
        type: string
      user_name:
        type: string
  aws.NodePool:
    title: NodePool
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      ami:
        $ref: '#/definitions/aws.Ami'
      auto_scaling:
        $ref: '#/definitions/aws.AutoScaling'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      external_volume:
        $ref: '#/definitions/aws.Volume'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AWSKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/aws.Node'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/aws.string'
      subnet_id:
        type: string
  aws.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      ami:
        $ref: '#/definitions/aws.Ami'
      external_volume:
        $ref: '#/definitions/aws.Volume'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int32
      pool_role:
        type: string
      security_group_id:
        type: array
        items:
          type: string
      subnet_id:
        type: string
  aws.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/aws.NodePoolT'
      template_id:
        type: string
  aws.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  aws.Volume:
    title: Volume
    type: object
    properties:
      delete_on_termination:
        type: boolean
      iops:
        type: integer
        format: int64
      volume_size:
        type: integer
        format: int64
      volume_type:
        type: string
  aws.string:
    title: string
    type: object
  azure.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  azure.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/azure.NodePool'
      project_id:
        type: string
      resource_group:
        type: string
      status:
        type: string
      token_name:
        type: string
  azure.DiagnosticsProfile:
    title: DiagnosticsProfile
    type: object
    properties:
      enable:
        type: boolean
      new_storage_account:
        type: boolean
      storage_account_id:
        type: string
  azure.ImageReference:
    title: ImageReference
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      image_id:
        type: string
      offer:
        type: string
      publisher:
        type: string
      sku:
        type: string
      version:
        type: string
  azure.NodePool:
    title: NodePool
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      auto_scaling:
        $ref: '#/definitions/azure.AutoScaling'
      boot_diagnostics:
        $ref: '#/definitions/azure.DiagnosticsProfile'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/azure.ImageReference'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/azure.VM'
      os_disk_type:
        $ref: '#/definitions/models.OsDiskType'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/azure.string'
      subnet_id:
        type: string
      user_name:
        type: string
      volume:
        $ref: '#/definitions/azure.Volume'
  azure.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      boot_diagnostics:
        $ref: '#/definitions/azure.DiagnosticsProfile'
      image:
        $ref: '#/definitions/azure.ImageReference'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/azure.VM'
      os_disk_type:
        $ref: '#/definitions/models.OsDiskType'
      pool_role:
        type: string
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/azure.string'
      subnet_id:
        type: string
      user_name:
        type: string
      volume:
        $ref: '#/definitions/azure.Volume'
  azure.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/azure.NodePoolT'
      resource_group:
        type: string
      template_id:
        type: string
  azure.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  azure.VM:
    title: VM
    type: object
    properties:
      cloud_id:
        type: string
      computer_name:
        type: string
      identity_principal_id:
        type: string
      name:
        type: string
      node_state:
        type: string
      password:
        type: string
      private_ip:
        type: string
      public_ip:
        type: string
      user_name:
        type: string
  azure.Volume:
    title: Volume
    type: object
    properties:
      disk_size:
        type: integer
        format: int32
      disk_type:
        $ref: '#/definitions/models.OsDiskType'
  azure.string:
    title: string
    type: object
  bson.ObjectId:
    title: ObjectId
    type: string
  do.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      do_project_id:
        type: string
      kube_credentials:
        $ref: '#/definitions/686.0xc042ca7f80.false'
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/do.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
  do.ImageReference:
    title: ImageReference
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      image_id:
        type: integer
        format: int64
      slug:
        type: string
  do.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: integer
        format: int64
      name:
        type: string
      node_state:
        type: string
      private_dns:
        type: string
      private_ip:
        type: string
      public_dns:
        type: string
      public_ip:
        type: string
      user_name:
        type: string
      volume_id:
        type: string
  do.NodePool:
    title: NodePool
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      external_volume:
        $ref: '#/definitions/do.Volume'
      image:
        $ref: '#/definitions/do.ImageReference'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/do.Node'
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      private_networking:
        type: boolean
      security_group_id:
        type: array
        items:
          $ref: '#/definitions/do.string'
  do.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      image:
        $ref: '#/definitions/do.ImageReference'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int32
      nodes:
        type: array
        items:
          $ref: '#/definitions/do.Node'
      pool_role:
        type: string
      private_networking:
        type: boolean
      security_group_id:
        type: array
        items:
          type: string
  do.Template:
    title: Template
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/do.NodePoolT'
      template_id:
        type: string
  do.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  do.Volume:
    title: Volume
    type: object
    properties:
      volume_size:
        type: integer
        format: int64
  do.string:
    title: string
    type: object
  gcp.AutoScaling:
    title: AutoScaling
    type: object
    properties:
      max_scaling_group_size:
        type: integer
        format: int64
      status:
        $ref: '#/definitions/models.Type'
  gcp.Cluster_Def:
    title: Cluster_Def
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gcp.NodePool'
      project_id:
        type: string
      status:
        type: string
      token_name:
        type: string
  gcp.Image:
    title: Image
    type: object
    properties:
      family:
        type: string
      project:
        type: string
  gcp.Machines:
    title: Machines
    type: object
    properties:
      machine_name:
        type: array
        items:
          type: string
  gcp.Node:
    title: Node
    type: object
    properties:
      cloud_id:
        type: string
      name:
        type: string
      node_state:
        type: string
      private_ip:
        type: string
      public_ip:
        type: string
      url:
        type: string
      user_name:
        type: string
  gcp.NodePool:
    title: NodePool
    type: object
    properties:
      auto_scaling:
        $ref: '#/definitions/gcp.AutoScaling'
      enable_public_ip:
        type: boolean
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/gcp.Image'
      is_external:
        type: boolean
      key_info:
        $ref: '#/definitions/key_utils.AZUREKey'
      machine_type:
        type: string
      name:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/gcp.Node'
      pool_id:
        type: string
      pool_role:
        $ref: '#/definitions/models.PoolRole'
      root_volume:
        $ref: '#/definitions/gcp.Volume'
      service_account_email:
        type: string
      subnet_id:
        type: string
      tags:
        type: array
        items:
          type: string
      volume:
        $ref: '#/definitions/gcp.Volume'
  gcp.NodePoolT:
    title: NodePoolT
    type: object
    properties:
      auto_scaling:
        $ref: '#/definitions/gcp.AutoScaling'
      enable_scaling:
        type: boolean
      image:
        $ref: '#/definitions/gcp.Image'
      is_external:
        type: boolean
      machine_type:
        type: string
      node_count:
        type: integer
        format: int64
      nodes:
        type: array
        items:
          $ref: '#/definitions/gcp.Node'
      pool_id:
        type: string
      pool_role:
        type: string
      root_volume:
        $ref: '#/definitions/gcp.Volume'
      subnet_id:
        type: string
      volume:
        $ref: '#/definitions/gcp.Volume'
  gcp.Template:
    title: Template
    type: object
    properties:
      _id:
        $ref: '#/definitions/bson.ObjectId'
      cloud:
        $ref: '#/definitions/models.Cloud'
      company_id:
        type: string
      is_cloudplex:
        type: boolean
      name:
        type: string
      network_name:
        type: string
      node_pools:
        type: array
        items:
          $ref: '#/definitions/gcp.NodePoolT'
      template_id:
        type: string
  gcp.TemplateMetadata:
    title: TemplateMetadata
    type: object
    properties:
      is_cloudplex:
        type: boolean
      pool_count:
        type: integer
        format: int64
      template_id:
        type: string
  gcp.Volume:
    title: Volume
    type: object
    properties:
      disk_size:
        type: integer
        format: int64
      disk_type:
        $ref: '#/definitions/models.GCPDiskType'
      is_blank:
        type: boolean
  godo.Region:
    title: Region
    type: object
  key_utils.AWSKey:
    title: AWSKey
    type: object
    properties:
      cloud:
        $ref: '#/definitions/models.Cloud'
      key_name:
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
      private_key:
        type: string
  key_utils.AZUREKey:
    title: AZUREKey
    type: object
    properties:
      admin_password:
        type: string
      cloud:
        $ref: '#/definitions/models.Cloud'
      credential_type:
        $ref: '#/definitions/models.CredentialsType'
      finger_print:
        type: string
      id:
        type: integer
        format: int64
      key_name:
        type: string
      key_type:
        $ref: '#/definitions/models.KeyType'
      private_key:
        type: string
      public_key:
        type: string
      username:
        type: string
  models.Cloud:
    title: Cloud
    type: string
    enum:
    - AWS = "aws"
    - Azure = "azure"
    - GCP = "gcp"
    - DO = "do"
    example: aws
  models.CredentialsType:
    title: CredentialsType
    type: string
    enum:
    - Password = "password"
    - SSHKey = "key"
    example: password
  models.GCPDiskType:
    title: GCPDiskType
    type: string
    enum:
    - PdStandard = "pd-standard"
    - PdSSD = "pd-ssd"
    example: pd-standard
  models.KeyType:
    title: KeyType
    type: string
    enum:
    - NEWKey = "new"
    - CPKey = "cp"
    - AWSKey = "aws"
    - AZUREKey = "azure"
    - USERKey = "user"
    example: new
  models.Machine:
    title: Machine
    type: object
    properties:
      Cores:
        type: integer
        format: int64
      InstanceType:
        type: string
  models.OsDiskType:
    title: OsDiskType
    type: string
    enum:
    - StandardHDD = "standard hdd"
    - StandardSSD = "standard ssd"
    - PremiumSSD = "premium ssd"
    example: standard hdd
  models.PoolRole:
    title: PoolRole
    type: string
    enum:
    - Master = "master"
    - Slave = "slave"
    example: master
  models.Type:
    title: Type
    type: string
    enum:
    - Existing = "existing"
    - New = "new"
    - Created = "created"
    - Deploying = "deploying"
    - Terminating = "terminating"
    example: existing
  subscriptionId:
    title: subscriptionId
    type: object
tags:
- name: health
  description: |
    health endpoint
- name: customerTemplate
  description: |
    customer template endpoint
- name: template/aws
  description: |
    Operations about AWS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/aws
  description: |
    Operations about AWS cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: cluster/azure
  description: |
    Operations about azure cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/azure
  description: |
    Operations about Azure template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/gcp
  description: |
    Operations about Gcp cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
- name: template/gcp
  description: |
    Operations about Gcp template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: template/do
  description: |
    Operations about DO template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]
- name: cluster/do
  description: |
    Operations about DO cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]
