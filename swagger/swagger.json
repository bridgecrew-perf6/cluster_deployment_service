{
    "swagger": "2.0",
    "info": {
        "title": "antelope API",
        "description": "cloudPlex CNAP node pool solution",
        "version": "1.0.0",
        "termsOfService": "https://cloudplex.io/",
        "contact": {
            "email": "info@cloudplex.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/antelope",
    "paths": {
        "/cluster/aks/": {
            "put": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "update an existing cluster",
                "operationId": "AKSClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aks.AKSCluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no cluster exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "add a new cluster",
                "operationId": "AKSClusterController.Add",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aks.AKSCluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against same project id already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/all": {
            "get": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "get all the clusters",
                "operationId": "AKSClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aks.AKSCluster"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/getvms/": {
            "get": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "get aks vm types",
                "operationId": "AKSClusterController.GetAKSVmsTypes",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aks.VMSizeTypes"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"Authorization format should be 'base64 encoded service_account_json'\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/kubeconfig/{projectId}": {
            "get": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "get cluter kubeconfig",
                "operationId": "AKSClusterController.Kubeconfig",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "starts a  cluster",
                "operationId": "AKSClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "returns status of nodes",
                "operationId": "AKSClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aks.AKSCluster"
                        }
                    },
                    "206": {
                        "description": "{object} aks.AKSCluster"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "terminates a  cluster",
                "operationId": "AKSClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"Authorization format should be 'base64 encoded service_account_json'\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "get cluster",
                "operationId": "AKSClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aks.AKSCluster"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aks/{projectId}/{forceDelete}": {
            "delete": {
                "tags": [
                    "cluster/aks"
                ],
                "description": "delete a cluster",
                "operationId": "AKSClusterController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "project id of the cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "forceDelete",
                        "description": "true",
                        "type": "boolean"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/": {
            "put": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "update an existing cluster",
                "operationId": "AWSClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "405": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "create a new cluster",
                "operationId": "AWSClusterController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Cluster_Def"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"msg\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against this project already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/all": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "get all the clusters",
                "operationId": "AWSClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aws.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/amis/{amiId}": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "returns aws ami details",
                "operationId": "AWSClusterController.AwsAmis",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Region",
                        "description": "false",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "amiId",
                        "description": "Id of the ami",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/*ec2.BlockDeviceMapping"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"ami id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/applyagent/{projectId}": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Apply cloudplex Agent file to eks cluster",
                "operationId": "AWSClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "clusterName",
                        "description": "clusterName",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Agent Applied successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/enablescaling/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "enables autoscaling",
                "operationId": "AWSClusterController.EnableScaling",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster autoscaled successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/getallmachines": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Get AWS  Machine Types",
                "operationId": "AWSClusterController.Get Machine Types",
                "responses": {
                    "200": {
                        "description": "[]string"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/getallregions": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Get AWS Regions",
                "operationId": "AWSClusterController.GetRegions",
                "responses": {
                    "200": {
                        "description": "[]models.Region"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/getzones/{region}": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "return zones against a region",
                "operationId": "AWSClusterController.Get Availability Zone",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "region",
                        "description": "region of AWS",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "true",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]*string"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/machine/info": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Get AWS Machine instance cores",
                "operationId": "AWSClusterController.GetCores",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Machine"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/sshkey/{keyname}": {
            "delete": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Delete SSH key",
                "operationId": "AWSClusterController.DeleteSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Region",
                        "description": "X-Region",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"key deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"User is unauthorized to perform this action\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/sshkey/{projectId}/{keyname}": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "Generates new SSH key",
                "operationId": "AWSClusterController.CreateSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "SSHKey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Region",
                        "description": "X-Region",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/key_utils.AWSKey"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/sshkeys": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "returns ssh key pairs",
                "operationId": "AWSClusterController.SSHKeyPair",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Region",
                        "description": "X-Region",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "starts a  cluster",
                "operationId": "AWSClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "returns status of nodes",
                "operationId": "AWSClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aws.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "terminates a  cluster",
                "operationId": "AWSClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "schema": {
                            "$ref": "#/definitions/X-Profile-Id"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/validateProfile/": {
            "post": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "check if profile is valid",
                "operationId": "AWSClusterController.Validate Profile",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vault.AwsCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"profile is invalid\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "get cluster",
                "operationId": "AWSClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aws.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/aws/{projectId}/{forceDelete}": {
            "delete": {
                "tags": [
                    "cluster/aws"
                ],
                "description": "delete a cluster",
                "operationId": "AWSClusterController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "project id of the cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "forceDelete",
                        "description": "true",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/": {
            "put": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "update an existing cluster",
                "operationId": "AzureClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no cluster exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "create a new cluster",
                "operationId": "AzureClusterController.Create",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"msg\": \"error message\"}"
                    },
                    "401": {
                        "description": "{\"msg\": \"error message\"}"
                    },
                    "404": {
                        "description": "{\"msg\": \"error message\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against same project id already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/all": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "get all the clusters",
                "operationId": "AzureClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/azure.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/applyagent/{projectId}": {
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Apply cloudplex Agent file to a aks cluster",
                "operationId": "AzureClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "clusterName",
                        "description": "clusterName",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "resourceGroup",
                        "description": "resourceGroup",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Agent Applied successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/getAllInstances": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Getting All Instances",
                "operationId": "AzureClusterController.Get Instances",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "false",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "region",
                        "description": "false",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]compute.VirtualMachines"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/getallmachines": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Get Azure VM Sizes",
                "operationId": "AzureClusterController.Get VM Sizes",
                "responses": {
                    "200": {
                        "description": "[]string"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/getallregions": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Get Azure Regions",
                "operationId": "AzureClusterController.Get Azure Regions",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "true",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]model.Region"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/machine/info": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Get Azure Machine instance cores",
                "operationId": "AzureClusterController.GetCores",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Machine"
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/sshkey/{keyname}": {
            "delete": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Delete SSH key",
                "operationId": "AzureClusterController.DeleteSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": key deleted successfully}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/sshkey/{keyname}/{projectId}": {
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "Generates new SSH key",
                "operationId": "AzureClusterController.CreateSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "SSHKey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/key_utils.AZUREKey"
                        }
                    },
                    "404": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/sshkeys": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "returns ssh key pairs",
                "operationId": "AzureClusterController.SSHKeyPair",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "starts a  cluster",
                "operationId": "AzureClusterController.Start",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "false",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "returns status of nodes",
                "operationId": "AzureClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "false",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/azure.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "terminates a  cluster",
                "operationId": "AzureClusterController.Terminate",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "false",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/validateProfile/": {
            "post": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "check if profile is valid",
                "operationId": "AzureClusterController.Validate Profile",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vault.AzureCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Profile is valid\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"profile is invalid\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/azure"
                ],
                "description": "get cluster",
                "operationId": "AzureClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/azure.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/azure/{projectId}/{forceDelete}": {},
        "/cluster/do/": {
            "put": {
                "tags": [
                    "cluster/do"
                ],
                "description": "update an existing cluster",
                "operationId": "DOClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "405": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "create a new cluster",
                "operationId": "DOClusterController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Cluster_Def"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"msg\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against this project already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/all": {
            "get": {
                "tags": [
                    "cluster/do"
                ],
                "description": "get all the clusters",
                "operationId": "DOClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/do.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/applyagent/{projectId}": {
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "Apply cloudplex Agent file to eks cluster",
                "operationId": "DOClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "clusterName",
                        "description": "clusterName",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Agent Applied successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/getallregions/": {
            "get": {
                "tags": [
                    "cluster/do"
                ],
                "description": "return regions and their supported machine sizes",
                "operationId": "DOClusterController.GetRegions",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "DO profile",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/godo.Region"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/sshkey/{keyname}": {
            "delete": {
                "tags": [
                    "cluster/do"
                ],
                "description": "Delete SSH key",
                "operationId": "DOClusterController.DeleteSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"key deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"User is unauthorized to perform this action\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/sshkey/{projectId}/{keyname}": {
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "Generates new SSH key",
                "operationId": "DOClusterController.CreateSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "SSHKey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Region",
                        "description": "X-Region",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/key_utils.AZUREKey"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/sshkeys": {
            "get": {
                "tags": [
                    "cluster/do"
                ],
                "description": "returns ssh key pairs",
                "operationId": "DOClusterController.SSHKeyPair",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "starts a  cluster",
                "operationId": "DOClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/do"
                ],
                "description": "returns status of nodes",
                "operationId": "DOClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/do.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "terminates a  cluster",
                "operationId": "DOClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "schema": {
                            "$ref": "#/definitions/X-Profile-Id"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/validateProfile/": {
            "post": {
                "tags": [
                    "cluster/do"
                ],
                "description": "validate if profile is valid",
                "operationId": "DOClusterController.ValidateProfile",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vault.DOCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Profile is valid\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/do"
                ],
                "description": "get cluster",
                "operationId": "DOClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/do.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/do/{projectId}/{forceDelete}": {},
        "/cluster/gcp/": {
            "put": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "update an existing cluster",
                "operationId": "GcpClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no cluster exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "create a new cluster",
                "operationId": "GcpClusterController.Create",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against same project id already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/all": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "get all the clusters",
                "operationId": "GcpClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/getallmachines/{region}/{zone}": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "return machines against a region and zone",
                "operationId": "GcpClusterController.GetAllMachines",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "region",
                        "description": "region of GCP",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "zone",
                        "description": "zone of GCP",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "[]string"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/getallregions": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "return all regions",
                "operationId": "GcpClusterController.Get All Regions",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/getzones/{region}": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "return zones against a region",
                "operationId": "GcpClusterController.GetZonesAgainstRegion",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "region",
                        "description": "region of GCP",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/machine/info": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "Get GCP Machine instance cores",
                "operationId": "GcpClusterController.GetCores",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Machine"
                        }
                    },
                    "500": {
                        "description": "{\"error\":  \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/serviceaccounts": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "returns list of service account emails",
                "operationId": "GcpClusterController.ListServiceAccounts",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"profile id is empty\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "500": {
                        "description": "{\"error\":  \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/sshkey/{keyname}": {
            "delete": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "Delete SSH key",
                "operationId": "GcpClusterController.DeleteSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "true",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": key deleted successfully}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": error msg}"
                    }
                }
            }
        },
        "/cluster/gcp/sshkey/{keyname}/{username}/{projectId}": {
            "post": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "Generates new SSH key",
                "operationId": "GcpClusterController.CreateSSHKey",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "keyname",
                        "description": "SSHKey",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "username",
                        "description": "UserName",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/key_utils.AZUREKey"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/sshkeys": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "returns ssh key pairs",
                "operationId": "GcpClusterController.SSHKeyPair",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "starts a  cluster",
                "operationId": "GcpClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "returns status of nodes",
                "operationId": "GcpClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gcp.Cluster_Def"
                        }
                    },
                    "206": {
                        "description": "{object} gcp.Cluster_Def"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "terminates a  cluster",
                "operationId": "GcpClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"Authorization format should be 'base64 encoded service_account_json'\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/validateProfile": {
            "post": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "check if profile is valid",
                "operationId": "GcpClusterController.Validate Profile",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.GcpCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"profile is invalid\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/gcp"
                ],
                "description": "get cluster",
                "operationId": "GcpClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gcp.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gcp/{projectId}/{forceDelete}": {},
        "/cluster/gke/": {
            "put": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "update an existing cluster",
                "operationId": "GKEClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKECluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no cluster exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "add a new cluster",
                "operationId": "GKEClusterController.Add",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKECluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against same project id already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/all": {
            "get": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "get all the clusters",
                "operationId": "GKEClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gke.GKECluster"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/applyagent/{projectId}": {
            "post": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "Apply cloudplex Agent file to a gke cluster",
                "operationId": "GKEClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "clusterName",
                        "description": "clusterName",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"Agent Applied successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/config/{zone}": {
            "get": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "get cluster",
                "operationId": "GKEClusterController.Get",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gke.ServerConfig"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "starts a  cluster",
                "operationId": "GKEClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "returns status of nodes",
                "operationId": "GKEClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gke.GKECluster"
                        }
                    },
                    "206": {
                        "description": "{object} gke.GKECluster"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"authorization params missing or invalid\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "terminates a  cluster",
                "operationId": "GKEClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "vault credentials profile id",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"Authorization format should be 'base64 encoded service_account_json'\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error_msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/gke"
                ],
                "description": "get cluster",
                "operationId": "GKEClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gke.GKECluster"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/gke/{projectId}/{forceDelete}": {},
        "/cluster/ibm/": {
            "put": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "update an existing cluster",
                "operationId": "IBMClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "405": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "create a new cluster",
                "operationId": "IBMClusterController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Cluster_Def"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"msg\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against this project already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/all": {
            "get": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "get all the clusters",
                "operationId": "IBMClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/getallmachines/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "get all instance list",
                "operationId": "IBMClusterController.Get All Instance List",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "schema": {
                            "$ref": "#/definitions/X-Profile-Id"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ibm.AllInstancesResponse"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/getregions/": {
            "get": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "fetch regions of ibm",
                "operationId": "IBMClusterController.Get Regions",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.Regions"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/start/{projectId}": {
            "post": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "starts a  cluster",
                "operationId": "IBMClusterController.Start",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/status/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "returns status of nodes",
                "operationId": "IBMClusterController.Status",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ibm.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/terminate/{projectId}/": {
            "post": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "terminates a  cluster",
                "operationId": "IBMClusterController.Terminate",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-Profile-Id",
                        "description": "profileId",
                        "schema": {
                            "$ref": "#/definitions/X-Profile-Id"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster terminated successfully\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/ibm"
                ],
                "description": "get cluster",
                "operationId": "IBMClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ibm.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/ibm/{projectId}/{forceDelete}": {},
        "/cluster/op/": {
            "put": {
                "tags": [
                    "cluster/op"
                ],
                "description": "update an existing cluster",
                "operationId": "OPClusterController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/op.Cluster_Def"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "402": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "405": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "cluster/op"
                ],
                "description": "create a new cluster",
                "operationId": "OPClusterController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for cluster content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/op.Cluster_Def"
                        }
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster created successfully\"}"
                    },
                    "400": {
                        "description": "{\"msg\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"cluster against this project already exists\"}"
                    },
                    "410": {
                        "description": "{\"error\": \"Core limit exceeded\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/op/all": {
            "get": {
                "tags": [
                    "cluster/op"
                ],
                "description": "get all the clusters",
                "operationId": "OPClusterController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/op.Cluster_Def"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/op/checkCluster/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/op"
                ],
                "description": "validates a cluster",
                "operationId": "OPClusterController.ValidateCluster",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster is running successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/op/{projectId}/": {
            "get": {
                "tags": [
                    "cluster/op"
                ],
                "description": "get cluster",
                "operationId": "OPClusterController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "Id of the project",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/op.Cluster_Def"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/cluster/op/{projectId}/{forceDelete}": {
            "delete": {
                "tags": [
                    "cluster/op"
                ],
                "description": "delete a cluster",
                "operationId": "OPClusterController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "projectId",
                        "description": "project id of the cluster",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "forceDelete",
                        "description": "true",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"cluster deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/customerTemplate/register": {
            "post": {
                "tags": [
                    "customerTemplate"
                ],
                "description": "register customer templates",
                "operationId": "CustomerTempalteController.Post",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/health/": {
            "get": {
                "tags": [
                    "health"
                ],
                "description": "get health",
                "operationId": "HealthController.Get",
                "responses": {
                    "200": {
                        "description": "\"alive!\""
                    }
                }
            }
        },
        "/template/aks/": {
            "put": {
                "tags": [
                    "template/aks"
                ],
                "description": "update an existing template",
                "operationId": "AKSTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aks.AKSClusterTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/aks"
                ],
                "description": "create a new template",
                "operationId": "AKSTemplateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aks.AKSClusterTemplate"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aks/all": {
            "get": {
                "tags": [
                    "template/aks"
                ],
                "description": "get all the templates",
                "operationId": "AKSTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aks.AKSClusterTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aks/{templateId}": {
            "get": {
                "tags": [
                    "template/aks"
                ],
                "description": "get template",
                "operationId": "AKSTemplateController.Get",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aks.AKSClusterTemplate"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/aks"
                ],
                "description": "delete a templates",
                "operationId": "AKSTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"name is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/": {
            "put": {
                "tags": [
                    "template/aws"
                ],
                "description": "update an existing template",
                "operationId": "AWSTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/aws"
                ],
                "description": "create a new template",
                "operationId": "AWSTemplateController.Create",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/all": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get all the templates",
                "operationId": "AWSTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aws.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get all the customer templates",
                "operationId": "AWSTemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aws.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get all the customer templates info",
                "operationId": "AWSTemplateController.GetAllCustomerTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aws.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get all the templates info",
                "operationId": "AWSTemplateController.GetAllTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/customerTemplate": {
            "put": {
                "tags": [
                    "template/aws"
                ],
                "description": "update an existing customer template",
                "operationId": "AWSTemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/aws"
                ],
                "description": "create a new customer template",
                "operationId": "AWSTemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get customer template",
                "operationId": "AWSTemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/aws"
                ],
                "description": "delete a customer template",
                "operationId": "AWSTemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/{templateId}": {
            "delete": {
                "tags": [
                    "template/aws"
                ],
                "description": "delete a templates",
                "operationId": "AWSTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/aws/{templateId}/": {
            "get": {
                "tags": [
                    "template/aws"
                ],
                "description": "get template",
                "operationId": "AWSTemplateController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/aws.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/": {
            "put": {
                "tags": [
                    "template/azure"
                ],
                "description": "update an existing template",
                "operationId": "AzureTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/azure"
                ],
                "description": "create a new template",
                "operationId": "AzureTemplateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/all": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get all the templates",
                "operationId": "AzureTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/azure.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get all the customer templates",
                "operationId": "AzureTemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/azure.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get all customer templates info",
                "operationId": "AzureTemplateController.Get All Customer Templates Info",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/azure.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get all templates info",
                "operationId": "AzureTemplateController.Get All Templates Info",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/azure.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/customerTemplate": {
            "put": {
                "tags": [
                    "template/azure"
                ],
                "description": "update an existing customer template",
                "operationId": "AzureTemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/azure"
                ],
                "description": "create a new customer template",
                "operationId": "AzureTemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get customer template",
                "operationId": "AzureTemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/azure"
                ],
                "description": "delete a customer template",
                "operationId": "AzureTemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/azure/{templateId}": {
            "get": {
                "tags": [
                    "template/azure"
                ],
                "description": "get template",
                "operationId": "AzureTemplateController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/azure.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/azure"
                ],
                "description": "delete a templates",
                "operationId": "AzureTemplateController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"name is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/": {
            "put": {
                "tags": [
                    "template/do"
                ],
                "description": "update an existing template",
                "operationId": "DOTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/do"
                ],
                "description": "create a new template",
                "operationId": "DOTemplateController.Create",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/all": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get all the templates",
                "operationId": "DOTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/do.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get all the customer templates",
                "operationId": "DOTemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/do.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get all the customer templates info",
                "operationId": "DOTemplateController.GetAllCustomerTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/do.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get all the templates info",
                "operationId": "DOTemplateController.GetAllTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/do.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/customerTemplate": {
            "put": {
                "tags": [
                    "template/do"
                ],
                "description": "update an existing customer template",
                "operationId": "DOTemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/do"
                ],
                "description": "create a new customer template",
                "operationId": "DOTemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error message\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get customer template",
                "operationId": "DOTemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/do"
                ],
                "description": "delete a customer template",
                "operationId": "DOTemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/{templateId}": {
            "delete": {
                "tags": [
                    "template/do"
                ],
                "description": "delete a template",
                "operationId": "DOTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/do/{templateId}/": {
            "get": {
                "tags": [
                    "template/do"
                ],
                "description": "get template",
                "operationId": "DOTemplateController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/do.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/": {
            "put": {
                "tags": [
                    "template/gcp"
                ],
                "description": "update an existing template",
                "operationId": "GcpTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/gcp"
                ],
                "description": "create a new template",
                "operationId": "GcpTemplateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/all": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get all the templates",
                "operationId": "GcpTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get all the customer templates",
                "operationId": "GcpTemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get all the customer templates info",
                "operationId": "GcpTemplateController.GetAllCustomerTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get all the templates info",
                "operationId": "GcpTemplateController.GetAllTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gcp.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/customerTemplate": {
            "put": {
                "tags": [
                    "template/gcp"
                ],
                "description": "update an existing customer template",
                "operationId": "GcpTemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/gcp"
                ],
                "description": "create a new customer template",
                "operationId": "GcpTemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get customer template",
                "operationId": "GcpTemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/gcp"
                ],
                "description": "delete a customer template",
                "operationId": "GcpTemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gcp/{templateId}": {
            "get": {
                "tags": [
                    "template/gcp"
                ],
                "description": "get template",
                "operationId": "GcpTemplateController.Get",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gcp.Template"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/gcp"
                ],
                "description": "delete a templates",
                "operationId": "GcpTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"name is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/": {
            "put": {
                "tags": [
                    "template/gke"
                ],
                "description": "update an existing template",
                "operationId": "GKETemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/gke"
                ],
                "description": "create a new template",
                "operationId": "GKETemplateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/all": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get all the templates",
                "operationId": "GKETemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gke.GKEClusterTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get all the customer templates",
                "operationId": "GKETemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gke.GKEClusterTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get all the customer templates info",
                "operationId": "GKETemplateController.GetAllCustomerTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gke.GKEClusterTemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get all the templates info",
                "operationId": "GKETemplateController.GetAllTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/gke.GKEClusterTemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/customerTemplate": {
            "put": {
                "tags": [
                    "template/gke"
                ],
                "description": "update an existing customer template",
                "operationId": "GKETemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/gke"
                ],
                "description": "create a new customer template",
                "operationId": "GKETemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get customer template",
                "operationId": "GKETemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/gke"
                ],
                "description": "delete a customer template",
                "operationId": "GKETemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/gke/{templateId}": {
            "get": {
                "tags": [
                    "template/gke"
                ],
                "description": "get template",
                "operationId": "GKETemplateController.Get",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/gke.GKEClusterTemplate"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/gke"
                ],
                "description": "delete a templates",
                "operationId": "GKETemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"name is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/": {
            "put": {
                "tags": [
                    "template/ibm"
                ],
                "description": "update an existing template",
                "operationId": "IBMTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/ibm"
                ],
                "description": "create a new template",
                "operationId": "IBMTemplateController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/all": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get all the templates",
                "operationId": "IBMTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/allCustomerTemplates": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get all the customer templates",
                "operationId": "IBMTemplateController.Get All Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/allCustomerTemplatesInfo": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get all the customer templates info",
                "operationId": "IBMTemplateController.GetAllCustomerTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/allTemplatesInfo": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get all the templates info",
                "operationId": "IBMTemplateController.GetAllTemplateInfo",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ibm.TemplateMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/customerTemplate": {
            "put": {
                "tags": [
                    "template/ibm"
                ],
                "description": "update an existing customer template",
                "operationId": "IBMTemplateController.Update customer templates",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/ibm"
                ],
                "description": "create a new customer template",
                "operationId": "IBMTemplateController.Create Customer Template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/customerTemplate/{templateId}": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get customer template",
                "operationId": "IBMTemplateController.Get customer template",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/ibm"
                ],
                "description": "delete a customer template",
                "operationId": "IBMTemplateController.Delete customer template",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"customer template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/ibm/{templateId}": {
            "get": {
                "tags": [
                    "template/ibm"
                ],
                "description": "get template",
                "operationId": "IBMTemplateController.Get",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ibm.Template"
                        }
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "delete": {
                "tags": [
                    "template/ibm"
                ],
                "description": "delete a templates",
                "operationId": "IBMTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Name of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"name is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/op/": {
            "put": {
                "tags": [
                    "template/op"
                ],
                "description": "update an existing template",
                "operationId": "OPTemplateController.Update",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/op.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template updated successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"no template exists with this name\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            },
            "post": {
                "tags": [
                    "template/op"
                ],
                "description": "create a new template",
                "operationId": "OPTemplateController.Create",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "teams",
                        "description": "teams",
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for template content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/op.Template"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template created successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "409": {
                        "description": "{\"error\": \"template with same name already exists\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/op/all": {
            "get": {
                "tags": [
                    "template/op"
                ],
                "description": "get all the templates",
                "operationId": "OPTemplateController.Get All",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/op.Template"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/op/{templateId}": {
            "delete": {
                "tags": [
                    "template/op"
                ],
                "description": "delete a template",
                "operationId": "OPTemplateController.Delete",
                "parameters": [
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "template id of the template",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{\"msg\": \"template deleted successfully\"}"
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"project id is empty\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        },
        "/template/op/{templateId}/": {
            "get": {
                "tags": [
                    "template/op"
                ],
                "description": "get template",
                "operationId": "OPTemplateController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "templateId",
                        "description": "Template Id of the template",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "header",
                        "name": "token",
                        "description": "token",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/op.Template"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "401": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "404": {
                        "description": "{\"error\": \"error msg\"}"
                    },
                    "500": {
                        "description": "{\"error\": \"error msg\"}"
                    }
                }
            }
        }
    },
    "definitions": {
        "*ec2.BlockDeviceMapping": {
            "title": "BlockDeviceMapping",
            "type": "object"
        },
        "12939.0xc0013a57d0.false": {
            "title": "false",
            "type": "object"
        },
        "13223.string": {
            "title": "string",
            "type": "object"
        },
        "13387.0xc000e3efc0.false": {
            "title": "false",
            "type": "object"
        },
        "13461.0xc001136b10.false": {
            "title": "false",
            "type": "object"
        },
        "1502.string": {
            "title": "string",
            "type": "object"
        },
        "434.0xc00141eb70.false": {
            "title": "false",
            "type": "object"
        },
        "5960.0xc001452090.false": {
            "title": "false",
            "type": "object"
        },
        "X-Profile-Id": {
            "title": "X-Profile-Id",
            "type": "object"
        },
        "aks.AKSCluster": {
            "title": "AKSCluster",
            "type": "object",
            "properties": {
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "cluster_id": {
                    "type": "string"
                },
                "company_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/aks.ManagedClusterProperties"
                },
                "resource_group": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "$ref": "#/definitions/13223.string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "aks.AKSClusterTemplate": {
            "title": "AKSClusterTemplate",
            "type": "object",
            "properties": {
                "Template_id": {
                    "type": "string"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "cluster_id": {
                    "type": "string"
                },
                "company_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "$ref": "#/definitions/aks.ManagedClusterPropertiesTemplate"
                },
                "resource_group": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "$ref": "#/definitions/1502.string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "aks.ManagedClusterAPIServerAccessProfile": {
            "title": "ManagedClusterAPIServerAccessProfile",
            "type": "object",
            "properties": {
                "enable_private_cluster": {
                    "type": "boolean"
                }
            }
        },
        "aks.ManagedClusterAPIServerAccessProfileTemplate": {
            "title": "ManagedClusterAPIServerAccessProfileTemplate",
            "type": "object",
            "properties": {
                "enable_private_cluster": {
                    "type": "boolean"
                }
            }
        },
        "aks.ManagedClusterAgentPoolProfile": {
            "title": "ManagedClusterAgentPoolProfile",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32"
                },
                "enable_auto_scaling": {
                    "type": "boolean"
                },
                "max_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "max_pods": {
                    "type": "integer",
                    "format": "int32"
                },
                "min_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "os_disk_size_gb": {
                    "type": "integer",
                    "format": "int32"
                },
                "os_type": {
                    "$ref": "#/definitions/aks.OSType"
                },
                "subnet_id": {
                    "type": "string"
                },
                "vm_size": {
                    "$ref": "#/definitions/aks.VMSizeTypes"
                }
            }
        },
        "aks.ManagedClusterAgentPoolProfileTemplate": {
            "title": "ManagedClusterAgentPoolProfileTemplate",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32"
                },
                "enable_auto_scaling": {
                    "type": "boolean"
                },
                "max_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "min_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "os_disk_size_gb": {
                    "type": "integer",
                    "format": "int32"
                },
                "os_type": {
                    "$ref": "#/definitions/aks.OSType"
                },
                "subnet_id": {
                    "type": "string"
                },
                "vm_size": {
                    "$ref": "#/definitions/aks.VMSizeTypes"
                }
            }
        },
        "aks.ManagedClusterProperties": {
            "title": "ManagedClusterProperties",
            "type": "object",
            "properties": {
                "agent_pool": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aks.ManagedClusterAgentPoolProfile"
                    }
                },
                "api_server_access_profile": {
                    "$ref": "#/definitions/aks.ManagedClusterAPIServerAccessProfile"
                },
                "dns_prefix": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "kubernetes_version": {
                    "type": "string"
                },
                "network_profile": {
                    "$ref": "#/definitions/aks.NetworkProfileType"
                },
                "provisioning_state": {
                    "type": "string"
                }
            }
        },
        "aks.ManagedClusterPropertiesTemplate": {
            "title": "ManagedClusterPropertiesTemplate",
            "type": "object",
            "properties": {
                "agent_pool": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aks.ManagedClusterAgentPoolProfileTemplate"
                    }
                },
                "api_server_access_profile": {
                    "$ref": "#/definitions/aks.ManagedClusterAPIServerAccessProfileTemplate"
                }
            }
        },
        "aks.NetworkProfileType": {
            "title": "NetworkProfileType",
            "type": "object",
            "properties": {
                "dns_service_ip": {
                    "type": "string"
                },
                "docker_bridge_cidr": {
                    "type": "string"
                },
                "pod_cidr": {
                    "type": "string"
                },
                "service_cidr": {
                    "type": "string"
                }
            }
        },
        "aks.OSType": {
            "title": "OSType",
            "type": "object"
        },
        "aks.VMSizeTypes": {
            "title": "VMSizeTypes",
            "type": "object"
        },
        "aws.Ami": {
            "title": "Ami",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "ami_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "root_volume": {
                    "$ref": "#/definitions/aws.Volume"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "aws.AutoScaling": {
            "title": "AutoScaling",
            "type": "object",
            "properties": {
                "max_scaling_group_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "aws.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "kube_credentials": {
                    "$ref": "#/definitions/13387.0xc000e3efc0.false"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aws.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                }
            }
        },
        "aws.Node": {
            "title": "Node",
            "type": "object",
            "properties": {
                "cloud_id": {
                    "type": "string"
                },
                "key_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_state": {
                    "type": "string"
                },
                "private_dns": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_dns": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "ssh_key": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "aws.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "ami": {
                    "$ref": "#/definitions/aws.Ami"
                },
                "auto_scaling": {
                    "$ref": "#/definitions/aws.AutoScaling"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "enable_scaling": {
                    "type": "boolean"
                },
                "external_volume": {
                    "$ref": "#/definitions/aws.Volume"
                },
                "is_external": {
                    "type": "boolean"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AWSKey"
                },
                "machine_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aws.Node"
                    }
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aws.string"
                    }
                },
                "subnet_id": {
                    "type": "string"
                }
            }
        },
        "aws.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "ami": {
                    "$ref": "#/definitions/aws.Ami"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "external_volume": {
                    "$ref": "#/definitions/aws.Volume"
                },
                "is_external": {
                    "type": "boolean"
                },
                "machine_type": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "pool_role": {
                    "type": "string"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subnet_id": {
                    "type": "string"
                }
            }
        },
        "aws.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/aws.NodePoolT"
                    }
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "aws.TemplateMetadata": {
            "title": "TemplateMetadata",
            "type": "object",
            "properties": {
                "is_cloudplex": {
                    "type": "boolean"
                },
                "pool_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "aws.Volume": {
            "title": "Volume",
            "type": "object",
            "properties": {
                "delete_on_termination": {
                    "type": "boolean"
                },
                "iops": {
                    "type": "integer",
                    "format": "int64"
                },
                "volume_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "volume_type": {
                    "type": "string"
                }
            }
        },
        "aws.string": {
            "title": "string",
            "type": "object"
        },
        "azure.AutoScaling": {
            "title": "AutoScaling",
            "type": "object",
            "properties": {
                "max_scaling_group_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "azure.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "resource_group": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                }
            }
        },
        "azure.DiagnosticsProfile": {
            "title": "DiagnosticsProfile",
            "type": "object",
            "properties": {
                "enable": {
                    "type": "boolean"
                },
                "new_storage_account": {
                    "type": "boolean"
                },
                "storage_account_id": {
                    "type": "string"
                }
            }
        },
        "azure.ImageReference": {
            "title": "ImageReference",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "image_id": {
                    "type": "string"
                },
                "offer": {
                    "type": "string"
                },
                "publisher": {
                    "type": "string"
                },
                "sku": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "azure.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "auto_scaling": {
                    "$ref": "#/definitions/azure.AutoScaling"
                },
                "boot_diagnostics": {
                    "$ref": "#/definitions/azure.DiagnosticsProfile"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "enable_scaling": {
                    "type": "boolean"
                },
                "image": {
                    "$ref": "#/definitions/azure.ImageReference"
                },
                "is_external": {
                    "type": "boolean"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AZUREKey"
                },
                "machine_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.VM"
                    }
                },
                "os_disk_type": {
                    "$ref": "#/definitions/models.OsDiskType"
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.string"
                    }
                },
                "subnet_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "volume": {
                    "$ref": "#/definitions/azure.Volume"
                }
            }
        },
        "azure.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "boot_diagnostics": {
                    "$ref": "#/definitions/azure.DiagnosticsProfile"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "image": {
                    "$ref": "#/definitions/azure.ImageReference"
                },
                "is_external": {
                    "type": "boolean"
                },
                "machine_type": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.VM"
                    }
                },
                "os_disk_type": {
                    "$ref": "#/definitions/models.OsDiskType"
                },
                "pool_role": {
                    "type": "string"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.string"
                    }
                },
                "subnet_id": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "volume": {
                    "$ref": "#/definitions/azure.Volume"
                }
            }
        },
        "azure.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/azure.NodePoolT"
                    }
                },
                "resource_group": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "azure.TemplateMetadata": {
            "title": "TemplateMetadata",
            "type": "object",
            "properties": {
                "is_cloudplex": {
                    "type": "boolean"
                },
                "pool_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "azure.VM": {
            "title": "VM",
            "type": "object",
            "properties": {
                "cloud_id": {
                    "type": "string"
                },
                "computer_name": {
                    "type": "string"
                },
                "identity_principal_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_state": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "azure.Volume": {
            "title": "Volume",
            "type": "object",
            "properties": {
                "disk_size": {
                    "type": "integer",
                    "format": "int32"
                },
                "disk_type": {
                    "$ref": "#/definitions/models.OsDiskType"
                }
            }
        },
        "azure.string": {
            "title": "string",
            "type": "object"
        },
        "bson.ObjectId": {
            "title": "ObjectId",
            "type": "object"
        },
        "do.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "do_project_id": {
                    "type": "string"
                },
                "kube_credentials": {
                    "$ref": "#/definitions/13461.0xc001136b10.false"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/do.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                }
            }
        },
        "do.ImageReference": {
            "title": "ImageReference",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "image_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "do.Node": {
            "title": "Node",
            "type": "object",
            "properties": {
                "cloud_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "node_state": {
                    "type": "string"
                },
                "private_dns": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_dns": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "volume_id": {
                    "type": "string"
                }
            }
        },
        "do.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "external_volume": {
                    "$ref": "#/definitions/do.Volume"
                },
                "image": {
                    "$ref": "#/definitions/do.ImageReference"
                },
                "is_external": {
                    "type": "boolean"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AZUREKey"
                },
                "machine_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/do.Node"
                    }
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                },
                "private_networking": {
                    "type": "boolean"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/do.string"
                    }
                }
            }
        },
        "do.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "external_volume": {
                    "$ref": "#/definitions/do.Volume"
                },
                "image": {
                    "$ref": "#/definitions/do.ImageReference"
                },
                "is_external": {
                    "type": "boolean"
                },
                "machine_type": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/do.Node"
                    }
                },
                "pool_role": {
                    "type": "string"
                },
                "private_networking": {
                    "type": "boolean"
                },
                "security_group_id": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "do.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/do.NodePoolT"
                    }
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "do.TemplateMetadata": {
            "title": "TemplateMetadata",
            "type": "object",
            "properties": {
                "is_cloudplex": {
                    "type": "boolean"
                },
                "pool_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "do.Volume": {
            "title": "Volume",
            "type": "object",
            "properties": {
                "volume_size": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "do.string": {
            "title": "string",
            "type": "object"
        },
        "gcp.AccountData": {
            "title": "AccountData",
            "type": "object",
            "properties": {
                "auth_provider_x509_cert_url": {
                    "type": "string"
                },
                "auth_uri": {
                    "type": "string"
                },
                "client_email": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_x509_cert_url": {
                    "type": "string"
                },
                "private_key": {
                    "type": "string"
                },
                "private_key_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "token_uri": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "gcp.AutoScaling": {
            "title": "AutoScaling",
            "type": "object",
            "properties": {
                "max_scaling_group_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "$ref": "#/definitions/models.Type"
                }
            }
        },
        "gcp.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gcp.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                },
                "vpc_name": {
                    "type": "string"
                }
            }
        },
        "gcp.GcpCredentials": {
            "title": "GcpCredentials",
            "type": "object",
            "properties": {
                "account_data": {
                    "$ref": "#/definitions/gcp.AccountData"
                },
                "raw_account_data": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "gcp.Image": {
            "title": "Image",
            "type": "object",
            "properties": {
                "family": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                }
            }
        },
        "gcp.Node": {
            "title": "Node",
            "type": "object",
            "properties": {
                "cloud_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_state": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "gcp.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "auto_scaling": {
                    "$ref": "#/definitions/gcp.AutoScaling"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "enable_scaling": {
                    "type": "boolean"
                },
                "image": {
                    "$ref": "#/definitions/gcp.Image"
                },
                "is_external": {
                    "type": "boolean"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AZUREKey"
                },
                "machine_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gcp.Node"
                    }
                },
                "pool_id": {
                    "type": "string"
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                },
                "root_volume": {
                    "$ref": "#/definitions/gcp.Volume"
                },
                "service_account_email": {
                    "type": "string"
                },
                "subnet_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "volume": {
                    "$ref": "#/definitions/gcp.Volume"
                }
            }
        },
        "gcp.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "auto_scaling": {
                    "$ref": "#/definitions/gcp.AutoScaling"
                },
                "enable_public_ip": {
                    "type": "boolean"
                },
                "enable_scaling": {
                    "type": "boolean"
                },
                "image": {
                    "$ref": "#/definitions/gcp.Image"
                },
                "is_external": {
                    "type": "boolean"
                },
                "machine_type": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gcp.Node"
                    }
                },
                "pool_id": {
                    "type": "string"
                },
                "pool_role": {
                    "type": "string"
                },
                "root_volume": {
                    "$ref": "#/definitions/gcp.Volume"
                },
                "subnet_id": {
                    "type": "string"
                },
                "volume": {
                    "$ref": "#/definitions/gcp.Volume"
                }
            }
        },
        "gcp.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gcp.NodePoolT"
                    }
                },
                "template_id": {
                    "type": "string"
                },
                "vpc_name": {
                    "type": "string"
                }
            }
        },
        "gcp.TemplateMetadata": {
            "title": "TemplateMetadata",
            "type": "object",
            "properties": {
                "is_cloudplex": {
                    "type": "boolean"
                },
                "pool_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "gcp.Volume": {
            "title": "Volume",
            "type": "object",
            "properties": {
                "disk_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "disk_type": {
                    "$ref": "#/definitions/models.GCPDiskType"
                },
                "is_blank": {
                    "type": "boolean"
                }
            }
        },
        "gke.AcceleratorConfig": {
            "title": "AcceleratorConfig",
            "type": "object",
            "properties": {
                "accelerator_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "accelerator_type": {
                    "type": "string"
                }
            }
        },
        "gke.AddonsConfig": {
            "title": "AddonsConfig",
            "type": "object",
            "properties": {
                "horizontal_pod_autoscaling": {
                    "$ref": "#/definitions/gke.HorizontalPodAutoscaling"
                },
                "http_load_balancing": {
                    "$ref": "#/definitions/gke.HttpLoadBalancing"
                },
                "kubernetes_dashboard": {
                    "$ref": "#/definitions/gke.KubernetesDashboard"
                },
                "network_policy_config": {
                    "$ref": "#/definitions/gke.NetworkPolicyConfig"
                }
            }
        },
        "gke.AutoUpgradeOptions": {
            "title": "AutoUpgradeOptions",
            "type": "object",
            "properties": {
                "auto_upgrade_start_time": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "gke.BigQueryDestination": {
            "title": "BigQueryDestination",
            "type": "object",
            "properties": {
                "dataset_id": {
                    "type": "string"
                }
            }
        },
        "gke.CidrBlock": {
            "title": "CidrBlock",
            "type": "object",
            "properties": {
                "cidr_block": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                }
            }
        },
        "gke.ClientCertificateConfig": {
            "title": "ClientCertificateConfig",
            "type": "object",
            "properties": {
                "issue_client_certificate": {
                    "type": "boolean"
                }
            }
        },
        "gke.ConsumptionMeteringConfig": {
            "title": "ConsumptionMeteringConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.DailyMaintenanceWindow": {
            "title": "DailyMaintenanceWindow",
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "gke.GKECluster": {
            "title": "GKECluster",
            "type": "object",
            "properties": {
                "addons_config": {
                    "$ref": "#/definitions/gke.AddonsConfig"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "cloud_status": {
                    "type": "string"
                },
                "cluster_ipv_4_cidr": {
                    "type": "string"
                },
                "company_id": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.StatusCondition"
                    }
                },
                "create_time": {
                    "type": "string"
                },
                "current_master_version": {
                    "type": "string"
                },
                "default_max_pods_constraint": {
                    "$ref": "#/definitions/gke.MaxPodsConstraint"
                },
                "description": {
                    "type": "string"
                },
                "enable_kubernetes_alpha": {
                    "type": "boolean"
                },
                "enable_tpu": {
                    "type": "boolean"
                },
                "endpoint": {
                    "type": "string"
                },
                "expire_time": {
                    "type": "string"
                },
                "initial_cluster_version": {
                    "type": "string"
                },
                "ip_allocation_policy": {
                    "$ref": "#/definitions/gke.IPAllocationPolicy"
                },
                "label_fingerprint": {
                    "type": "string"
                },
                "legacy_abac": {
                    "$ref": "#/definitions/gke.LegacyAbac"
                },
                "location": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logging_service": {
                    "type": "string"
                },
                "maintenance_policy": {
                    "$ref": "#/definitions/gke.MaintenancePolicy"
                },
                "master_auth": {
                    "$ref": "#/definitions/gke.MasterAuth"
                },
                "master_authorized_networks_config": {
                    "$ref": "#/definitions/gke.MasterAuthorizedNetworksConfig"
                },
                "monitoring_service": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "network_config": {
                    "$ref": "#/definitions/gke.NetworkConfig"
                },
                "network_policy": {
                    "$ref": "#/definitions/gke.NetworkPolicy"
                },
                "node_ipv_4_cidr_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.NodePool"
                    }
                },
                "private_cluster_config": {
                    "$ref": "#/definitions/gke.PrivateClusterConfig"
                },
                "project_id": {
                    "type": "string"
                },
                "resource_labels": {
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resource_usage_export_config": {
                    "$ref": "#/definitions/gke.ResourceUsageExportConfig"
                },
                "self_link": {
                    "type": "string"
                },
                "services_ipv_4_cidr": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_message": {
                    "type": "string"
                },
                "subnetwork": {
                    "type": "string"
                },
                "tpu_ipv_4_cidr_block": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "gke.GKEClusterTemplate": {
            "title": "GKEClusterTemplate",
            "type": "object",
            "properties": {
                "addons_config": {
                    "$ref": "#/definitions/gke.AddonsConfig"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "cloud_status": {
                    "type": "string"
                },
                "cluster_ipv_4_cidr": {
                    "type": "string"
                },
                "company_id": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.StatusCondition"
                    }
                },
                "create_time": {
                    "type": "string"
                },
                "current_master_version": {
                    "type": "string"
                },
                "default_max_pods_constraint": {
                    "$ref": "#/definitions/gke.MaxPodsConstraint"
                },
                "description": {
                    "type": "string"
                },
                "enable_kubernetes_alpha": {
                    "type": "boolean"
                },
                "enable_tpu": {
                    "type": "boolean"
                },
                "endpoint": {
                    "type": "string"
                },
                "expire_time": {
                    "type": "string"
                },
                "initial_cluster_version": {
                    "type": "string"
                },
                "ip_allocation_policy": {
                    "$ref": "#/definitions/gke.IPAllocationPolicy"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "label_fingerprint": {
                    "type": "string"
                },
                "legacy_abac": {
                    "$ref": "#/definitions/gke.LegacyAbac"
                },
                "location": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logging_service": {
                    "type": "string"
                },
                "maintenance_policy": {
                    "$ref": "#/definitions/gke.MaintenancePolicy"
                },
                "master_auth": {
                    "$ref": "#/definitions/gke.MasterAuth"
                },
                "master_authorized_networks_config": {
                    "$ref": "#/definitions/gke.MasterAuthorizedNetworksConfig"
                },
                "monitoring_service": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "network_config": {
                    "$ref": "#/definitions/gke.NetworkConfig"
                },
                "network_policy": {
                    "$ref": "#/definitions/gke.NetworkPolicy"
                },
                "node_ipv_4_cidr_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.NodePool"
                    }
                },
                "private_cluster_config": {
                    "$ref": "#/definitions/gke.PrivateClusterConfig"
                },
                "resource_labels": {
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "resource_usage_export_config": {
                    "$ref": "#/definitions/gke.ResourceUsageExportConfig"
                },
                "self_link": {
                    "type": "string"
                },
                "services_ipv_4_cidr": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_message": {
                    "type": "string"
                },
                "subnetwork": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "tpu_ipv_4_cidr_block": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "gke.GKEClusterTemplateMetadata": {
            "title": "GKEClusterTemplateMetadata",
            "type": "object"
        },
        "gke.HorizontalPodAutoscaling": {
            "title": "HorizontalPodAutoscaling",
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.HttpLoadBalancing": {
            "title": "HttpLoadBalancing",
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.IPAllocationPolicy": {
            "title": "IPAllocationPolicy",
            "type": "object",
            "properties": {
                "cluster_ipv_4_cidr": {
                    "type": "string"
                },
                "cluster_ipv_4_cidr_block": {
                    "type": "string"
                },
                "cluster_secondary_range_name": {
                    "type": "string"
                },
                "create_subnetwork": {
                    "type": "boolean"
                },
                "node_ipv_4_cidr": {
                    "type": "string"
                },
                "node_ipv_4_cidr_block": {
                    "type": "string"
                },
                "services_ipv_4_cidr": {
                    "type": "string"
                },
                "services_ipv_4_cidr_block": {
                    "type": "string"
                },
                "services_secondary_range_name": {
                    "type": "string"
                },
                "subnetwork_name": {
                    "type": "string"
                },
                "tpu_ipv_4_cidr_block": {
                    "type": "string"
                },
                "use_ip_aliases": {
                    "type": "boolean"
                }
            }
        },
        "gke.KubernetesDashboard": {
            "title": "KubernetesDashboard",
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.LegacyAbac": {
            "title": "LegacyAbac",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.MaintenancePolicy": {
            "title": "MaintenancePolicy",
            "type": "object",
            "properties": {
                "window": {
                    "$ref": "#/definitions/gke.MaintenanceWindow"
                }
            }
        },
        "gke.MaintenanceWindow": {
            "title": "MaintenanceWindow",
            "type": "object",
            "properties": {
                "daily_maintenance_window": {
                    "$ref": "#/definitions/gke.DailyMaintenanceWindow"
                }
            }
        },
        "gke.MasterAuth": {
            "title": "MasterAuth",
            "type": "object",
            "properties": {
                "client_certificate": {
                    "type": "string"
                },
                "client_certificate_config": {
                    "$ref": "#/definitions/gke.ClientCertificateConfig"
                },
                "client_key": {
                    "type": "string"
                },
                "cluster_ca_certificate": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "gke.MasterAuthorizedNetworksConfig": {
            "title": "MasterAuthorizedNetworksConfig",
            "type": "object",
            "properties": {
                "cidr_blocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.CidrBlock"
                    }
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.MaxPodsConstraint": {
            "title": "MaxPodsConstraint",
            "type": "object",
            "properties": {
                "max_pods_per_node": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "gke.NetworkConfig": {
            "title": "NetworkConfig",
            "type": "object",
            "properties": {
                "network": {
                    "type": "string"
                },
                "subnetwork": {
                    "type": "string"
                }
            }
        },
        "gke.NetworkPolicy": {
            "title": "NetworkPolicy",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "gke.NetworkPolicyConfig": {
            "title": "NetworkPolicyConfig",
            "type": "object",
            "properties": {
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "gke.NodeConfig": {
            "title": "NodeConfig",
            "type": "object",
            "properties": {
                "accelerators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.AcceleratorConfig"
                    }
                },
                "disk_size_gb": {
                    "type": "integer",
                    "format": "int64"
                },
                "disk_type": {
                    "type": "string"
                },
                "image_type": {
                    "type": "string"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "local_ssd_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "machine_type": {
                    "type": "string"
                },
                "metadata": {
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "min_cpu_platform": {
                    "type": "string"
                },
                "oauth_scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "preemptible": {
                    "type": "boolean"
                },
                "service_account": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.NodeTaint"
                    }
                }
            }
        },
        "gke.NodeManagement": {
            "title": "NodeManagement",
            "type": "object",
            "properties": {
                "auto_repair": {
                    "type": "boolean"
                },
                "auto_upgrade": {
                    "type": "boolean"
                },
                "upgrade_options": {
                    "$ref": "#/definitions/gke.AutoUpgradeOptions"
                }
            }
        },
        "gke.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "autoscaling": {
                    "$ref": "#/definitions/gke.NodePoolAutoscaling"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gke.StatusCondition"
                    }
                },
                "config": {
                    "$ref": "#/definitions/gke.NodeConfig"
                },
                "initial_node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "instance_group_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "management": {
                    "$ref": "#/definitions/gke.NodeManagement"
                },
                "max_pods_constraint": {
                    "$ref": "#/definitions/gke.MaxPodsConstraint"
                },
                "name": {
                    "type": "string"
                },
                "pod_ipv_4_cidr_size": {
                    "type": "integer",
                    "format": "int64"
                },
                "self_link": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_message": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gke.NodePoolAutoscaling": {
            "title": "NodePoolAutoscaling",
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "max_node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "min_node_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "gke.NodeTaint": {
            "title": "NodeTaint",
            "type": "object",
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "gke.PrivateClusterConfig": {
            "title": "PrivateClusterConfig",
            "type": "object",
            "properties": {
                "enable_private_endpoint": {
                    "type": "boolean"
                },
                "enable_private_nodes": {
                    "type": "boolean"
                },
                "master_ipv_4_cidr_block": {
                    "type": "string"
                },
                "private_endpoint": {
                    "type": "string"
                },
                "public_endpoint": {
                    "type": "string"
                }
            }
        },
        "gke.ResourceUsageExportConfig": {
            "title": "ResourceUsageExportConfig",
            "type": "object",
            "properties": {
                "bigquery_destination": {
                    "$ref": "#/definitions/gke.BigQueryDestination"
                },
                "consumption_metering_config": {
                    "$ref": "#/definitions/gke.ConsumptionMeteringConfig"
                },
                "enable_network_egress_metering": {
                    "type": "boolean"
                }
            }
        },
        "gke.ServerConfig": {
            "title": "ServerConfig",
            "type": "object"
        },
        "gke.StatusCondition": {
            "title": "StatusCondition",
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "godo.Region": {
            "title": "Region",
            "type": "object"
        },
        "ibm.AllInstancesResponse": {
            "title": "AllInstancesResponse",
            "type": "object",
            "properties": {
                "profiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ibm.InstanceProfile"
                    }
                }
            }
        },
        "ibm.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "disablePublicServiceEndpoint": {
                    "type": "boolean"
                },
                "kubeVersion": {
                    "type": "string"
                },
                "kube_credentials": {
                    "$ref": "#/definitions/12939.0xc0013a57d0.false"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ibm.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                },
                "vpcID": {
                    "type": "string"
                }
            }
        },
        "ibm.InstanceProfile": {
            "title": "InstanceProfile",
            "type": "object",
            "properties": {
                "family": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ibm.Node": {
            "title": "Node",
            "type": "object",
            "properties": {
                "cloud_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "node_state": {
                    "type": "string"
                },
                "private_dns": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_dns": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "volume_id": {
                    "type": "string"
                }
            }
        },
        "ibm.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "machine_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                }
            }
        },
        "ibm.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "enable_public_ip": {
                    "type": "boolean"
                },
                "enable_scaling": {
                    "type": "boolean"
                },
                "is_external": {
                    "type": "boolean"
                },
                "machine_type": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ibm.Node"
                    }
                },
                "pool_id": {
                    "type": "string"
                },
                "pool_role": {
                    "type": "string"
                },
                "subnet_id": {
                    "type": "string"
                }
            }
        },
        "ibm.Regions": {
            "title": "Regions",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ibm.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "is_cloudplex": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "network_name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ibm.NodePoolT"
                    }
                },
                "template_id": {
                    "type": "string"
                },
                "vpc_name": {
                    "type": "string"
                }
            }
        },
        "ibm.TemplateMetadata": {
            "title": "TemplateMetadata",
            "type": "object",
            "properties": {
                "is_cloudplex": {
                    "type": "boolean"
                },
                "pool_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "template_id": {
                    "type": "string"
                }
            }
        },
        "key_utils.AWSKey": {
            "title": "AWSKey",
            "type": "object",
            "properties": {
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "key_name": {
                    "type": "string"
                },
                "key_type": {
                    "$ref": "#/definitions/models.KeyType"
                },
                "private_key": {
                    "type": "string"
                }
            }
        },
        "key_utils.AZUREKey": {
            "title": "AZUREKey",
            "type": "object",
            "properties": {
                "admin_password": {
                    "type": "string"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "credential_type": {
                    "$ref": "#/definitions/models.CredentialsType"
                },
                "finger_print": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "key_name": {
                    "type": "string"
                },
                "key_type": {
                    "$ref": "#/definitions/models.KeyType"
                },
                "private_key": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Cloud": {
            "title": "Cloud",
            "type": "string",
            "enum": [
                "AWS = \"aws\"",
                "Azure = \"azure\"",
                "GCP = \"gcp\"",
                "GKE = \"gke\"",
                "DO = \"do\"",
                "IBM = \"ibm\"",
                "OP = \"op\"",
                "AKS = \"aks\""
            ],
            "example": "aws"
        },
        "models.CredentialsType": {
            "title": "CredentialsType",
            "type": "string",
            "enum": [
                "Password = \"password\"",
                "SSHKey = \"key\""
            ],
            "example": "password"
        },
        "models.GCPDiskType": {
            "title": "GCPDiskType",
            "type": "string",
            "enum": [
                "PdStandard = \"pd-standard\"",
                "PdSSD = \"pd-ssd\""
            ],
            "example": "pd-standard"
        },
        "models.KeyType": {
            "title": "KeyType",
            "type": "string",
            "enum": [
                "NEWKey = \"new\"",
                "CPKey = \"cp\"",
                "AWSKey = \"aws\"",
                "AZUREKey = \"azure\"",
                "USERKey = \"user\""
            ],
            "example": "new"
        },
        "models.Machine": {
            "title": "Machine",
            "type": "object",
            "properties": {
                "Cores": {
                    "type": "integer",
                    "format": "int64"
                },
                "InstanceType": {
                    "type": "string"
                }
            }
        },
        "models.OsDiskType": {
            "title": "OsDiskType",
            "type": "string",
            "enum": [
                "StandardHDD = \"standard hdd\"",
                "StandardSSD = \"standard ssd\"",
                "PremiumSSD = \"premium ssd\""
            ],
            "example": "standard hdd"
        },
        "models.PoolRole": {
            "title": "PoolRole",
            "type": "string",
            "enum": [
                "Master = \"master\"",
                "Slave = \"slave\""
            ],
            "example": "master"
        },
        "models.Type": {
            "title": "Type",
            "type": "string",
            "enum": [
                "Existing = \"existing\"",
                "New = \"new\"",
                "Created = \"created\"",
                "ClusterCreated = \"cluster created\"",
                "Deploying = \"deploying\"",
                "Terminating = \"terminating\""
            ],
            "example": "existing"
        },
        "op.Cluster_Def": {
            "title": "Cluster_Def",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "kube_credentials": {
                    "$ref": "#/definitions/5960.0xc001452090.false"
                },
                "name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/op.NodePool"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                }
            }
        },
        "op.Node": {
            "title": "Node",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "op.NodePool": {
            "title": "NodePool",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AZUREKey"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/op.Node"
                    }
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                }
            }
        },
        "op.NodePoolT": {
            "title": "NodePoolT",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "key_info": {
                    "$ref": "#/definitions/key_utils.AZUREKey"
                },
                "name": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/op.NodeT"
                    }
                },
                "pool_role": {
                    "$ref": "#/definitions/models.PoolRole"
                }
            }
        },
        "op.NodeT": {
            "title": "NodeT",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "private_ip": {
                    "type": "string"
                },
                "public_ip": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "op.Template": {
            "title": "Template",
            "type": "object",
            "properties": {
                "_id": {
                    "$ref": "#/definitions/bson.ObjectId"
                },
                "cloud": {
                    "$ref": "#/definitions/models.Cloud"
                },
                "company_id": {
                    "type": "string"
                },
                "kube_credentials": {
                    "$ref": "#/definitions/434.0xc00141eb70.false"
                },
                "name": {
                    "type": "string"
                },
                "node_pools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/op.NodePoolT"
                    }
                },
                "status": {
                    "type": "string"
                },
                "template_id": {
                    "type": "string"
                },
                "token_name": {
                    "type": "string"
                }
            }
        },
        "vault.AwsCredentials": {
            "title": "AwsCredentials",
            "type": "object",
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "access_secret": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "vault.AzureCredentials": {
            "title": "AzureCredentials",
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                }
            }
        },
        "vault.DOCredentials": {
            "title": "DOCredentials",
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "health",
            "description": "health endpoint\n"
        },
        {
            "name": "customerTemplate",
            "description": "customer template endpoint\n"
        },
        {
            "name": "template/op",
            "description": "Operations about OP template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/op",
            "description": "Operations about OP cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/aws",
            "description": "Operations about AWS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/aws",
            "description": "Operations about AWS cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "cluster/azure",
            "description": "Operations about azure cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/azure",
            "description": "Operations about Azure template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/gcp",
            "description": "Operations about Gcp cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/gcp",
            "description": "Operations about Gcp template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/gke",
            "description": "Operations about GKE cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/gke",
            "description": "Operations about GKE template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "template/do",
            "description": "Operations about DO template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/do",
            "description": "Operations about DO cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/ibm",
            "description": "Operations about Gcp template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/ibm",
            "description": "Operations about IBM cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/op",
            "description": "Operations about OP template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/op",
            "description": "Operations about OP cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        },
        {
            "name": "template/aks",
            "description": "Operations about AKS template [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/template/{cloud}/]\n"
        },
        {
            "name": "cluster/aks",
            "description": "Operations about AKS cluster [BASE URL WILL BE CHANGED TO STANDARD URLs IN FUTURE e.g. /antelope/cluster/{cloud}/]\n"
        }
    ]
}